/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/(root)/home/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fdevonfennell%2FDesktop%2Fnext-investment%2Ffrontend%2Fapp%2F(root)%2Fhome%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fdevonfennell%2FDesktop%2Fnext-investment%2Ffrontend%2Fapp%2F(root)%2Fhome%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \****************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/(root)/home/page.tsx */ \"(app-pages-browser)/./app/(root)/home/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZkZXZvbmZlbm5lbGwlMkZEZXNrdG9wJTJGbmV4dC1pbnZlc3RtZW50JTJGZnJvbnRlbmQlMkZhcHAlMkYocm9vdCklMkZob21lJTJGcGFnZS50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0Qmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSw4S0FBa0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz9hNjUwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL2Rldm9uZmVubmVsbC9EZXNrdG9wL25leHQtaW52ZXN0bWVudC9mcm9udGVuZC9hcHAvKHJvb3QpL2hvbWUvcGFnZS50c3hcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fdevonfennell%2FDesktop%2Fnext-investment%2Ffrontend%2Fapp%2F(root)%2Fhome%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/(root)/home/page.tsx":
/*!**********************************!*\
  !*** ./app/(root)/home/page.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _components_ui_Listing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/ui/Listing */ \"(app-pages-browser)/./components/ui/Listing.tsx\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/constants */ \"(app-pages-browser)/./constants/index.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n\nconst Home = ()=>{\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                className: \"text-customCyan text-start text-[2rem] py-4 pl-6 font-thin bg-black\",\n                children: \"Home\"\n            }, void 0, false, {\n                fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/app/(root)/home/page.tsx\",\n                lineNumber: 13,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_Listing__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                data: _constants__WEBPACK_IMPORTED_MODULE_2__.top30_default[2],\n                showKeysOnData: true,\n                mapped: {\n                    container: {\n                        tailwindClass: \"hover:bg-gray-700 text-customCyan\",\n                        onClick: (e)=>{\n                            return console.log(e.target.innerText);\n                        }\n                    }\n                }\n            }, void 0, false, {\n                fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/app/(root)/home/page.tsx\",\n                lineNumber: 14,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/app/(root)/home/page.tsx\",\n        lineNumber: 12,\n        columnNumber: 7\n    }, undefined);\n};\n_c = Home;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Home);\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC8ocm9vdCkvaG9tZS9wYWdlLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQzhDO0FBR0s7QUFFcEI7QUFFL0IsTUFBTUcsT0FBTztJQUVYLHFCQUNJLDhEQUFDQzs7MEJBQ0MsOERBQUNDO2dCQUFHQyxXQUFVOzBCQUFzRTs7Ozs7OzBCQUNwRiw4REFBQ04sOERBQU9BO2dCQUNSTyxNQUFNTixxREFBYSxDQUFDLEVBQUU7Z0JBQ3RCTyxjQUFjO2dCQUNkQyxRQUFRO29CQUNOQyxXQUFXO3dCQUNUQyxlQUFlO3dCQUNmQyxTQUFTLENBQUNDOzRCQUFZLE9BQU9DLFFBQVFDLEdBQUcsQ0FBQ0YsRUFBRUcsTUFBTSxDQUFDQyxTQUFTO3dCQUFDO29CQUM5RDtnQkFDRjs7Ozs7Ozs7Ozs7O0FBSVI7S0FqQk1kO0FBbUJOLCtEQUFlQSxJQUFJQSxFQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC8ocm9vdCkvaG9tZS9wYWdlLnRzeD82ZDcwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5pbXBvcnQgTGlzdGluZyBmcm9tIFwiQC9jb21wb25lbnRzL3VpL0xpc3RpbmdcIjtcbmltcG9ydCBPdmVydmlldyBmcm9tIFwiQC9jb21wb25lbnRzL3VpL092ZXJ2aWV3XCI7XG5pbXBvcnQgU3RvY2tMaXN0IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvU3RvY2tMaXN0XCI7XG5pbXBvcnQgeyBTdG9jaywgdG9wMzBfZGVmYXVsdCB9IGZyb20gXCJAL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTWFwcGVkRGV0YWlscyB9IGZyb20gXCJAL2NvbnN0YW50cy90eXBlc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IEhvbWUgPSAoKSA9PiB7XG4gXG4gIHJldHVybiAoXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPGgxIGNsYXNzTmFtZT0ndGV4dC1jdXN0b21DeWFuIHRleHQtc3RhcnQgdGV4dC1bMnJlbV0gcHktNCBwbC02IGZvbnQtdGhpbiBiZy1ibGFjayc+SG9tZTwvaDE+XG4gICAgICAgIDxMaXN0aW5nPFN0b2NrPlxuICAgICAgICBkYXRhPXt0b3AzMF9kZWZhdWx0WzJdfVxuICAgICAgICBzaG93S2V5c09uRGF0YVxuICAgICAgICBtYXBwZWQ9e3tcbiAgICAgICAgICBjb250YWluZXI6IHtcbiAgICAgICAgICAgIHRhaWx3aW5kQ2xhc3M6ICdob3ZlcjpiZy1ncmF5LTcwMCB0ZXh0LWN1c3RvbUN5YW4nLFxuICAgICAgICAgICAgb25DbGljazogKGU6IGFueSkgPT4ge3JldHVybiBjb25zb2xlLmxvZyhlLnRhcmdldC5pbm5lclRleHQpfVxuICAgICAgICAgIH1cbiAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb21lIl0sIm5hbWVzIjpbIkxpc3RpbmciLCJ0b3AzMF9kZWZhdWx0IiwiUmVhY3QiLCJIb21lIiwic2VjdGlvbiIsImgxIiwiY2xhc3NOYW1lIiwiZGF0YSIsInNob3dLZXlzT25EYXRhIiwibWFwcGVkIiwiY29udGFpbmVyIiwidGFpbHdpbmRDbGFzcyIsIm9uQ2xpY2siLCJlIiwiY29uc29sZSIsImxvZyIsInRhcmdldCIsImlubmVyVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/(root)/home/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/contexts/SelectionContext.tsx":
/*!**************************************************!*\
  !*** ./components/contexts/SelectionContext.tsx ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SelectionProvider: function() { return /* binding */ SelectionProvider; },\n/* harmony export */   useSelection: function() { return /* binding */ useSelection; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ SelectionProvider,useSelection auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst SelectionContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst SelectionProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [selectedItem, setSelectedItem] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);\n    const value = {\n        selectedItem,\n        setSelectedItem\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SelectionContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/components/contexts/SelectionContext.tsx\",\n        lineNumber: 25,\n        columnNumber: 5\n    }, undefined);\n};\n_s(SelectionProvider, \"MESchzW+ztPKXOkQEmljAHKZBhw=\");\n_c = SelectionProvider;\nconst useSelection = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SelectionContext);\n    if (!context) {\n        throw new Error(\"useSelection must be used within a SelectionProvider\");\n    }\n    return context;\n};\n_s1(useSelection, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SelectionProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvY29udGV4dHMvU2VsZWN0aW9uQ29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUM4RTtBQU85RSxNQUFNSSxpQ0FBbUJILG9EQUFhQSxDQUFtQ0k7QUFNbEUsTUFBTUMsb0JBQXNEO1FBQUMsRUFBRUMsUUFBUSxFQUFFOztJQUM5RSxNQUFNLENBQUNDLGNBQWNDLGdCQUFnQixHQUFHTiwrQ0FBUUEsQ0FBa0JFO0lBR2xFLE1BQU1LLFFBQVE7UUFDWkY7UUFDQUM7SUFDRjtJQUVBLHFCQUNFLDhEQUFDTCxpQkFBaUJPLFFBQVE7UUFBQ0QsT0FBT0E7a0JBQy9CSDs7Ozs7O0FBR1AsRUFBRTtHQWRXRDtLQUFBQTtBQWdCTixNQUFNTSxlQUFlOztJQUMxQixNQUFNQyxVQUFVWCxpREFBVUEsQ0FBQ0U7SUFDM0IsSUFBSSxDQUFDUyxTQUFTO1FBQ1osTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVCxFQUFFO0lBTldEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbXBvbmVudHMvY29udGV4dHMvU2VsZWN0aW9uQ29udGV4dC50c3g/NjgxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgU2VsZWN0aW9uQ29udGV4dFR5cGUge1xuICBzZWxlY3RlZEl0ZW06IGFueTtcbiAgc2V0U2VsZWN0ZWRJdGVtOiBSZWFjdC5EaXNwYXRjaDxhbnk+XG59XG5cbmNvbnN0IFNlbGVjdGlvbkNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFNlbGVjdGlvbkNvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG5pbnRlcmZhY2UgU2VsZWN0aW9uUHJvdmlkZXJQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBjb25zdCBTZWxlY3Rpb25Qcm92aWRlcjogUmVhY3QuRkM8U2VsZWN0aW9uUHJvdmlkZXJQcm9wcz4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IFtzZWxlY3RlZEl0ZW0sIHNldFNlbGVjdGVkSXRlbV0gPSB1c2VTdGF0ZTxhbnkgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG5cblxuICBjb25zdCB2YWx1ZSA9IHtcbiAgICBzZWxlY3RlZEl0ZW0sXG4gICAgc2V0U2VsZWN0ZWRJdGVtXG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8U2VsZWN0aW9uQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dmFsdWV9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvU2VsZWN0aW9uQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VTZWxlY3Rpb24gPSAoKTogU2VsZWN0aW9uQ29udGV4dFR5cGUgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChTZWxlY3Rpb25Db250ZXh0KTtcbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VTZWxlY3Rpb24gbXVzdCBiZSB1c2VkIHdpdGhpbiBhIFNlbGVjdGlvblByb3ZpZGVyJyk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VTdGF0ZSIsIlNlbGVjdGlvbkNvbnRleHQiLCJ1bmRlZmluZWQiLCJTZWxlY3Rpb25Qcm92aWRlciIsImNoaWxkcmVuIiwic2VsZWN0ZWRJdGVtIiwic2V0U2VsZWN0ZWRJdGVtIiwidmFsdWUiLCJQcm92aWRlciIsInVzZVNlbGVjdGlvbiIsImNvbnRleHQiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/contexts/SelectionContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ui/Listing.tsx":
/*!***********************************!*\
  !*** ./components/ui/Listing.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n/* harmony import */ var _contexts_SelectionContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../contexts/SelectionContext */ \"(app-pages-browser)/./components/contexts/SelectionContext.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n // Assuming you have a utility to capitalize strings\n\nconst Listing = (props)=>{\n    _s();\n    const { data, mapped, showKeysOnData, children } = props;\n    const { selectedItem, setSelectedItem } = (0,_contexts_SelectionContext__WEBPACK_IMPORTED_MODULE_3__.useSelection)();\n    const handleSelection = (selection)=>{\n        var _mapped_container, _mapped_container1;\n        console.log(data);\n        setSelectedItem(data);\n        (mapped === null || mapped === void 0 ? void 0 : (_mapped_container = mapped.container) === null || _mapped_container === void 0 ? void 0 : _mapped_container.onClick) && (mapped === null || mapped === void 0 ? void 0 : (_mapped_container1 = mapped.container) === null || _mapped_container1 === void 0 ? void 0 : _mapped_container1.onClick(selection));\n    };\n    // Function to merge tailwind classes\n    const mergeClasses = function() {\n        for(var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++){\n            classes[_key] = arguments[_key];\n        }\n        return classes.filter(Boolean).join(\" \");\n    };\n    // Function to render nested key-value pairs\n    const render = (objWithKeys)=>{\n        var _mapped_container, _mapped_container1, _mapped_container2, _mapped_container3;\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n            className: mergeClasses(mapped === null || mapped === void 0 ? void 0 : (_mapped_container = mapped.container) === null || _mapped_container === void 0 ? void 0 : _mapped_container.tailwindClass),\n            style: {\n                ...mapped === null || mapped === void 0 ? void 0 : (_mapped_container1 = mapped.container) === null || _mapped_container1 === void 0 ? void 0 : _mapped_container1.style\n            },\n            onClick: handleSelection,\n            onTouchStart: mapped === null || mapped === void 0 ? void 0 : (_mapped_container2 = mapped.container) === null || _mapped_container2 === void 0 ? void 0 : _mapped_container2.onTouchStart,\n            onTouchEnd: mapped === null || mapped === void 0 ? void 0 : (_mapped_container3 = mapped.container) === null || _mapped_container3 === void 0 ? void 0 : _mapped_container3.onTouchEnd,\n            children: Object.entries(objWithKeys).map((param)=>{\n                let [key, val] = param;\n                var _mapped_keyValueContainer, _mapped_keyValueContainer1, _mapped_keyValueContainer2, _mapped_keyRef, _mapped_keyRef1, _mapped_keyRef2, _mapped_value, _mapped_value1, _mapped_value2;\n                const capitalizedKey = (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.capitalize)(key);\n                const targetedKey = props[\"_\".concat(capitalizedKey)];\n                const hiddenKey = props[\"hide\".concat(capitalizedKey)];\n                if (!hiddenKey && targetedKey) {\n                    var _mapped_keyValueContainer3, _mapped_keyRef3, _mapped_value3, _mapped_keyValueContainer4, _mapped_keyValueContainer5, _mapped_keyRef4, _mapped_keyRef5, _mapped_value4, _mapped_value5;\n                    const { keyValueContainer, keyRef, value } = targetedKey;\n                    // Merge targeted and mapped styles & classes\n                    const mergedKeyValueClass = mergeClasses(mapped === null || mapped === void 0 ? void 0 : (_mapped_keyValueContainer3 = mapped.keyValueContainer) === null || _mapped_keyValueContainer3 === void 0 ? void 0 : _mapped_keyValueContainer3.tailwindClass, keyValueContainer === null || keyValueContainer === void 0 ? void 0 : keyValueContainer.tailwindClass);\n                    const mergedKeyRefClass = mergeClasses(mapped === null || mapped === void 0 ? void 0 : (_mapped_keyRef3 = mapped.keyRef) === null || _mapped_keyRef3 === void 0 ? void 0 : _mapped_keyRef3.tailwindClass, keyRef === null || keyRef === void 0 ? void 0 : keyRef.tailwindClass);\n                    const mergedValueClass = mergeClasses(mapped === null || mapped === void 0 ? void 0 : (_mapped_value3 = mapped.value) === null || _mapped_value3 === void 0 ? void 0 : _mapped_value3.tailwindClass, value === null || value === void 0 ? void 0 : value.tailwindClass);\n                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        onClick: (keyValueContainer === null || keyValueContainer === void 0 ? void 0 : keyValueContainer.onClick) || (mapped === null || mapped === void 0 ? void 0 : (_mapped_keyValueContainer4 = mapped.keyValueContainer) === null || _mapped_keyValueContainer4 === void 0 ? void 0 : _mapped_keyValueContainer4.onClick),\n                        className: mergedKeyValueClass,\n                        style: {\n                            ...mapped === null || mapped === void 0 ? void 0 : (_mapped_keyValueContainer5 = mapped.keyValueContainer) === null || _mapped_keyValueContainer5 === void 0 ? void 0 : _mapped_keyValueContainer5.style,\n                            ...keyValueContainer === null || keyValueContainer === void 0 ? void 0 : keyValueContainer.style\n                        },\n                        children: [\n                            showKeysOnData && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                onClick: (keyRef === null || keyRef === void 0 ? void 0 : keyRef.onClick) || (mapped === null || mapped === void 0 ? void 0 : (_mapped_keyRef4 = mapped.keyRef) === null || _mapped_keyRef4 === void 0 ? void 0 : _mapped_keyRef4.onClick),\n                                className: mergedKeyRefClass,\n                                style: {\n                                    ...mapped === null || mapped === void 0 ? void 0 : (_mapped_keyRef5 = mapped.keyRef) === null || _mapped_keyRef5 === void 0 ? void 0 : _mapped_keyRef5.style,\n                                    ...keyRef === null || keyRef === void 0 ? void 0 : keyRef.style\n                                },\n                                children: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(key === null || key === void 0 ? void 0 : key.toString())\n                            }, void 0, false, {\n                                fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/components/ui/Listing.tsx\",\n                                lineNumber: 67,\n                                columnNumber: 19\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                onClick: (value === null || value === void 0 ? void 0 : value.onClick) || (mapped === null || mapped === void 0 ? void 0 : (_mapped_value4 = mapped.value) === null || _mapped_value4 === void 0 ? void 0 : _mapped_value4.onClick),\n                                className: mergedValueClass,\n                                style: {\n                                    ...mapped === null || mapped === void 0 ? void 0 : (_mapped_value5 = mapped.value) === null || _mapped_value5 === void 0 ? void 0 : _mapped_value5.style,\n                                    ...value === null || value === void 0 ? void 0 : value.style\n                                },\n                                children: val === null || val === void 0 ? void 0 : val.toString()\n                            }, void 0, false, {\n                                fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/components/ui/Listing.tsx\",\n                                lineNumber: 75,\n                                columnNumber: 17\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/components/ui/Listing.tsx\",\n                        lineNumber: 61,\n                        columnNumber: 15\n                    }, undefined);\n                }\n                return !hiddenKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    onClick: mapped === null || mapped === void 0 ? void 0 : (_mapped_keyValueContainer = mapped.keyValueContainer) === null || _mapped_keyValueContainer === void 0 ? void 0 : _mapped_keyValueContainer.onClick,\n                    className: mergeClasses(mapped === null || mapped === void 0 ? void 0 : (_mapped_keyValueContainer1 = mapped.keyValueContainer) === null || _mapped_keyValueContainer1 === void 0 ? void 0 : _mapped_keyValueContainer1.tailwindClass),\n                    style: {\n                        ...mapped === null || mapped === void 0 ? void 0 : (_mapped_keyValueContainer2 = mapped.keyValueContainer) === null || _mapped_keyValueContainer2 === void 0 ? void 0 : _mapped_keyValueContainer2.style\n                    },\n                    children: [\n                        showKeysOnData && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            onClick: mapped === null || mapped === void 0 ? void 0 : (_mapped_keyRef = mapped.keyRef) === null || _mapped_keyRef === void 0 ? void 0 : _mapped_keyRef.onClick,\n                            className: mergeClasses(mapped === null || mapped === void 0 ? void 0 : (_mapped_keyRef1 = mapped.keyRef) === null || _mapped_keyRef1 === void 0 ? void 0 : _mapped_keyRef1.tailwindClass),\n                            style: {\n                                ...mapped === null || mapped === void 0 ? void 0 : (_mapped_keyRef2 = mapped.keyRef) === null || _mapped_keyRef2 === void 0 ? void 0 : _mapped_keyRef2.style\n                            },\n                            children: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(key === null || key === void 0 ? void 0 : key.toString())\n                        }, void 0, false, {\n                            fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/components/ui/Listing.tsx\",\n                            lineNumber: 95,\n                            columnNumber: 19\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            onClick: mapped === null || mapped === void 0 ? void 0 : (_mapped_value = mapped.value) === null || _mapped_value === void 0 ? void 0 : _mapped_value.onClick,\n                            className: mergeClasses(mapped === null || mapped === void 0 ? void 0 : (_mapped_value1 = mapped.value) === null || _mapped_value1 === void 0 ? void 0 : _mapped_value1.tailwindClass),\n                            style: {\n                                ...mapped === null || mapped === void 0 ? void 0 : (_mapped_value2 = mapped.value) === null || _mapped_value2 === void 0 ? void 0 : _mapped_value2.style\n                            },\n                            children: val === null || val === void 0 ? void 0 : val.toString()\n                        }, void 0, false, {\n                            fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/components/ui/Listing.tsx\",\n                            lineNumber: 103,\n                            columnNumber: 17\n                        }, undefined)\n                    ]\n                }, key, true, {\n                    fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/components/ui/Listing.tsx\",\n                    lineNumber: 88,\n                    columnNumber: 15\n                }, undefined);\n            })\n        }, void 0, false, {\n            fileName: \"/Users/devonfennell/Desktop/next-investment/frontend/components/ui/Listing.tsx\",\n            lineNumber: 40,\n            columnNumber: 7\n        }, undefined);\n    };\n    return render(data);\n};\n_s(Listing, \"rddpDyx2aVsnO/Teltk2gx6Rbjw=\", false, function() {\n    return [\n        _contexts_SelectionContext__WEBPACK_IMPORTED_MODULE_3__.useSelection\n    ];\n});\n_c = Listing;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Listing);\nvar _c;\n$RefreshReg$(_c, \"Listing\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ui/Listing.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./constants/index.ts":
/*!****************************!*\
  !*** ./constants/index.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Devon_default: function() { return /* binding */ Devon_default; },\n/* harmony export */   default_MarketStatus: function() { return /* binding */ default_MarketStatus; },\n/* harmony export */   default_NewsSentiments: function() { return /* binding */ default_NewsSentiments; },\n/* harmony export */   default_TopGainersLosers: function() { return /* binding */ default_TopGainersLosers; },\n/* harmony export */   top30_default: function() { return /* binding */ top30_default; }\n/* harmony export */ });\nconst top30_default = [\n    {\n        company: \"Apple Inc.\",\n        ticker: \"AAPL\",\n        marketCap: \"2.65T\",\n        stockPrice: \"$170.55\"\n    },\n    {\n        company: \"Microsoft Corp.\",\n        ticker: \"MSFT\",\n        marketCap: \"2.50T\",\n        stockPrice: \"$340.12\"\n    },\n    {\n        company: \"Saudi Aramco\",\n        ticker: \"2222.SR\",\n        marketCap: \"2.00T\",\n        stockPrice: \"SAR 36.85\"\n    },\n    {\n        company: \"Alphabet Inc.\",\n        ticker: \"GOOGL\",\n        marketCap: \"1.65T\",\n        stockPrice: \"$140.23\"\n    },\n    {\n        company: \"Amazon.com Inc.\",\n        ticker: \"AMZN\",\n        marketCap: \"1.40T\",\n        stockPrice: \"$130.42\"\n    },\n    {\n        company: \"Tesla Inc.\",\n        ticker: \"TSLA\",\n        marketCap: \"950B\",\n        stockPrice: \"$865.32\"\n    },\n    {\n        company: \"Berkshire Hathaway Inc.\",\n        ticker: \"BRK.B\",\n        marketCap: \"750B\",\n        stockPrice: \"$334.45\"\n    },\n    {\n        company: \"NVIDIA Corp.\",\n        ticker: \"NVDA\",\n        marketCap: \"730B\",\n        stockPrice: \"$470.09\"\n    },\n    {\n        company: \"Meta Platforms Inc.\",\n        ticker: \"META\",\n        marketCap: \"700B\",\n        stockPrice: \"$280.19\"\n    },\n    {\n        company: \"Johnson & Johnson\",\n        ticker: \"JNJ\",\n        marketCap: \"630B\",\n        stockPrice: \"$170.03\"\n    },\n    {\n        company: \"Visa Inc.\",\n        ticker: \"V\",\n        marketCap: \"620B\",\n        stockPrice: \"$243.27\"\n    },\n    {\n        company: \"Procter & Gamble Co.\",\n        ticker: \"PG\",\n        marketCap: \"580B\",\n        stockPrice: \"$154.60\"\n    },\n    {\n        company: \"UnitedHealth Group Inc.\",\n        ticker: \"UNH\",\n        marketCap: \"570B\",\n        stockPrice: \"$515.38\"\n    },\n    {\n        company: \"JPMorgan Chase & Co.\",\n        ticker: \"JPM\",\n        marketCap: \"560B\",\n        stockPrice: \"$150.95\"\n    },\n    {\n        company: \"Walmart Inc.\",\n        ticker: \"WMT\",\n        marketCap: \"510B\",\n        stockPrice: \"$153.24\"\n    },\n    {\n        company: \"Mastercard Inc.\",\n        ticker: \"MA\",\n        marketCap: \"500B\",\n        stockPrice: \"$375.11\"\n    },\n    {\n        company: \"Intel Corp.\",\n        ticker: \"INTC\",\n        marketCap: \"485B\",\n        stockPrice: \"$40.52\"\n    },\n    {\n        company: \"The Home Depot Inc.\",\n        ticker: \"HD\",\n        marketCap: \"470B\",\n        stockPrice: \"$350.78\"\n    },\n    {\n        company: \"Coca-Cola Co.\",\n        ticker: \"KO\",\n        marketCap: \"460B\",\n        stockPrice: \"$62.23\"\n    },\n    {\n        company: \"Pfizer Inc.\",\n        ticker: \"PFE\",\n        marketCap: \"450B\",\n        stockPrice: \"$41.87\"\n    },\n    {\n        company: \"Chevron Corp.\",\n        ticker: \"CVX\",\n        marketCap: \"440B\",\n        stockPrice: \"$172.65\"\n    },\n    {\n        company: \"Cisco Systems Inc.\",\n        ticker: \"CSCO\",\n        marketCap: \"430B\",\n        stockPrice: \"$56.20\"\n    },\n    {\n        company: \"Oracle Corp.\",\n        ticker: \"ORCL\",\n        marketCap: \"420B\",\n        stockPrice: \"$104.15\"\n    },\n    {\n        company: \"IBM Corp.\",\n        ticker: \"IBM\",\n        marketCap: \"400B\",\n        stockPrice: \"$135.45\"\n    },\n    {\n        company: \"Exxon Mobil Corp.\",\n        ticker: \"XOM\",\n        marketCap: \"390B\",\n        stockPrice: \"$124.75\"\n    },\n    {\n        company: \"Adobe Inc.\",\n        ticker: \"ADBE\",\n        marketCap: \"380B\",\n        stockPrice: \"$597.12\"\n    },\n    {\n        company: \"Salesforce.com Inc.\",\n        ticker: \"CRM\",\n        marketCap: \"370B\",\n        stockPrice: \"$224.91\"\n    },\n    {\n        company: \"Broadcom Inc.\",\n        ticker: \"AVGO\",\n        marketCap: \"360B\",\n        stockPrice: \"$887.29\"\n    },\n    {\n        company: \"Netflix Inc.\",\n        ticker: \"NFLX\",\n        marketCap: \"350B\",\n        stockPrice: \"$501.83\"\n    },\n    {\n        company: \"United Parcel Service Inc.\",\n        ticker: \"UPS\",\n        marketCap: \"340B\",\n        stockPrice: \"$176.59\"\n    },\n    {\n        company: \"Qualcomm Inc.\",\n        ticker: \"QCOM\",\n        marketCap: \"330B\",\n        stockPrice: \"$138.27\"\n    },\n    {\n        company: \"PayPal Holdings Inc.\",\n        ticker: \"PYPL\",\n        marketCap: \"320B\",\n        stockPrice: \"$252.14\"\n    },\n    {\n        company: \"Texas Instruments Inc.\",\n        ticker: \"TXN\",\n        marketCap: \"310B\",\n        stockPrice: \"$194.50\"\n    },\n    {\n        company: \"Goldman Sachs Group Inc.\",\n        ticker: \"GS\",\n        marketCap: \"300B\",\n        stockPrice: \"$392.25\"\n    }\n];\nconst default_TopGainersLosers = {\n    \"last_updated\": \"2024-09-10 16:15:59 US/Eastern\",\n    \"metadata\": \"Top gainers, losers, and most actively traded US tickers\",\n    \"most_actively_traded\": [\n        {\n            \"change_amount\": \"1.0029\",\n            \"change_percentage\": \"306.6035%\",\n            \"price\": \"1.33\",\n            \"ticker\": \"QH\",\n            \"volume\": \"319073072\"\n        },\n        {\n            \"change_amount\": \"1.63\",\n            \"change_percentage\": \"1.5309%\",\n            \"price\": \"108.1\",\n            \"ticker\": \"NVDA\",\n            \"volume\": \"262361913\"\n        },\n        {\n            \"change_amount\": \"-0.24\",\n            \"change_percentage\": \"-2.5641%\",\n            \"price\": \"9.12\",\n            \"ticker\": \"SQQQ\",\n            \"volume\": \"158094904\"\n        },\n        {\n            \"change_amount\": \"0.96\",\n            \"change_percentage\": \"92.3077%\",\n            \"price\": \"2.0\",\n            \"ticker\": \"BKYI\",\n            \"volume\": \"145526491\"\n        },\n        {\n            \"change_amount\": \"-0.0076\",\n            \"change_percentage\": \"-15.9664%\",\n            \"price\": \"0.04\",\n            \"ticker\": \"WTO\",\n            \"volume\": \"128652509\"\n        },\n        {\n            \"change_amount\": \"0.0044\",\n            \"change_percentage\": \"5.8201%\",\n            \"price\": \"0.08\",\n            \"ticker\": \"MAXN\",\n            \"volume\": \"105090774\"\n        },\n        {\n            \"change_amount\": \"-0.0132\",\n            \"change_percentage\": \"-41.25%\",\n            \"price\": \"0.0188\",\n            \"ticker\": \"VHAI\",\n            \"volume\": \"100292666\"\n        },\n        {\n            \"change_amount\": \"0.15\",\n            \"change_percentage\": \"0.4335%\",\n            \"price\": \"34.75\",\n            \"ticker\": \"PLTR\",\n            \"volume\": \"89705210\"\n        },\n        {\n            \"change_amount\": \"0.92\",\n            \"change_percentage\": \"3.354%\",\n            \"price\": \"28.35\",\n            \"ticker\": \"SOXL\",\n            \"volume\": \"80473527\"\n        },\n        {\n            \"change_amount\": \"0.8348\",\n            \"change_percentage\": \"115.1131%\",\n            \"price\": \"1.56\",\n            \"ticker\": \"AILE\",\n            \"volume\": \"80154750\"\n        },\n        {\n            \"change_amount\": \"9.9\",\n            \"change_percentage\": \"4.5776%\",\n            \"price\": \"226.17\",\n            \"ticker\": \"TSLA\",\n            \"volume\": \"78111874\"\n        },\n        {\n            \"change_amount\": \"-1.48\",\n            \"change_percentage\": \"-8.4091%\",\n            \"price\": \"16.12\",\n            \"ticker\": \"HPE\",\n            \"volume\": \"68145642\"\n        },\n        {\n            \"change_amount\": \"-0.345\",\n            \"change_percentage\": \"-3.2364%\",\n            \"price\": \"10.315\",\n            \"ticker\": \"F\",\n            \"volume\": \"61145067\"\n        },\n        {\n            \"change_amount\": \"0.21\",\n            \"change_percentage\": \"0.9767%\",\n            \"price\": \"21.71\",\n            \"ticker\": \"T\",\n            \"volume\": \"60839052\"\n        },\n        {\n            \"change_amount\": \"-0.475\",\n            \"change_percentage\": \"-1.0567%\",\n            \"price\": \"44.475\",\n            \"ticker\": \"XLF\",\n            \"volume\": \"58972341\"\n        },\n        {\n            \"change_amount\": \"-0.085\",\n            \"change_percentage\": \"-1.526%\",\n            \"price\": \"5.485\",\n            \"ticker\": \"NIO\",\n            \"volume\": \"58288275\"\n        },\n        {\n            \"change_amount\": \"-0.0289\",\n            \"change_percentage\": \"-17.0%\",\n            \"price\": \"0.1411\",\n            \"ticker\": \"MULN\",\n            \"volume\": \"57817969\"\n        },\n        {\n            \"change_amount\": \"-0.03\",\n            \"change_percentage\": \"-0.4237%\",\n            \"price\": \"7.05\",\n            \"ticker\": \"SOFI\",\n            \"volume\": \"57628682\"\n        },\n        {\n            \"change_amount\": \"-0.09\",\n            \"change_percentage\": \"-0.4719%\",\n            \"price\": \"18.98\",\n            \"ticker\": \"INTC\",\n            \"volume\": \"55197022\"\n        },\n        {\n            \"change_amount\": \"0.86\",\n            \"change_percentage\": \"8.8751%\",\n            \"price\": \"10.55\",\n            \"ticker\": \"TSLL\",\n            \"volume\": \"55145492\"\n        }\n    ],\n    \"top_gainers\": [\n        {\n            \"change_amount\": \"1.0029\",\n            \"change_percentage\": \"306.6035%\",\n            \"price\": \"1.33\",\n            \"ticker\": \"QH\",\n            \"volume\": \"319073072\"\n        },\n        {\n            \"change_amount\": \"0.1043\",\n            \"change_percentage\": \"158.7519%\",\n            \"price\": \"0.17\",\n            \"ticker\": \"AILEW\",\n            \"volume\": \"301364\"\n        },\n        {\n            \"change_amount\": \"0.1201\",\n            \"change_percentage\": \"150.3129%\",\n            \"price\": \"0.2\",\n            \"ticker\": \"HLLY+\",\n            \"volume\": \"35470\"\n        },\n        {\n            \"change_amount\": \"0.0447\",\n            \"change_percentage\": \"148.0132%\",\n            \"price\": \"0.0749\",\n            \"ticker\": \"BFLY+\",\n            \"volume\": \"160015\"\n        },\n        {\n            \"change_amount\": \"0.8348\",\n            \"change_percentage\": \"115.1131%\",\n            \"price\": \"1.56\",\n            \"ticker\": \"AILE\",\n            \"volume\": \"80154750\"\n        },\n        {\n            \"change_amount\": \"0.0159\",\n            \"change_percentage\": \"113.5714%\",\n            \"price\": \"0.0299\",\n            \"ticker\": \"BTCTW\",\n            \"volume\": \"26773\"\n        },\n        {\n            \"change_amount\": \"0.0525\",\n            \"change_percentage\": \"95.4545%\",\n            \"price\": \"0.1075\",\n            \"ticker\": \"BAERW\",\n            \"volume\": \"96223\"\n        },\n        {\n            \"change_amount\": \"0.96\",\n            \"change_percentage\": \"92.3077%\",\n            \"price\": \"2.0\",\n            \"ticker\": \"BKYI\",\n            \"volume\": \"145526491\"\n        },\n        {\n            \"change_amount\": \"0.0176\",\n            \"change_percentage\": \"87.5622%\",\n            \"price\": \"0.0377\",\n            \"ticker\": \"LDTCW\",\n            \"volume\": \"45439\"\n        },\n        {\n            \"change_amount\": \"0.2125\",\n            \"change_percentage\": \"79.4393%\",\n            \"price\": \"0.48\",\n            \"ticker\": \"CLBR+\",\n            \"volume\": \"1637\"\n        },\n        {\n            \"change_amount\": \"0.0137\",\n            \"change_percentage\": \"79.1908%\",\n            \"price\": \"0.031\",\n            \"ticker\": \"HOVRW\",\n            \"volume\": \"10143\"\n        },\n        {\n            \"change_amount\": \"0.0139\",\n            \"change_percentage\": \"69.5%\",\n            \"price\": \"0.0339\",\n            \"ticker\": \"GRDIW\",\n            \"volume\": \"1100\"\n        },\n        {\n            \"change_amount\": \"0.018\",\n            \"change_percentage\": \"67.6692%\",\n            \"price\": \"0.0446\",\n            \"ticker\": \"WENAW\",\n            \"volume\": \"29147\"\n        },\n        {\n            \"change_amount\": \"2.74\",\n            \"change_percentage\": \"53.7255%\",\n            \"price\": \"7.84\",\n            \"ticker\": \"TRVN\",\n            \"volume\": \"679848\"\n        },\n        {\n            \"change_amount\": \"0.0216\",\n            \"change_percentage\": \"52.5547%\",\n            \"price\": \"0.0627\",\n            \"ticker\": \"PLMIW\",\n            \"volume\": \"417\"\n        },\n        {\n            \"change_amount\": \"1.29\",\n            \"change_percentage\": \"49.6154%\",\n            \"price\": \"3.89\",\n            \"ticker\": \"FBLG\",\n            \"volume\": \"7099049\"\n        },\n        {\n            \"change_amount\": \"0.1009\",\n            \"change_percentage\": \"48.0019%\",\n            \"price\": \"0.3111\",\n            \"ticker\": \"SHOTW\",\n            \"volume\": \"5135\"\n        },\n        {\n            \"change_amount\": \"1.06\",\n            \"change_percentage\": \"47.5336%\",\n            \"price\": \"3.29\",\n            \"ticker\": \"SMX\",\n            \"volume\": \"29030516\"\n        },\n        {\n            \"change_amount\": \"0.0094\",\n            \"change_percentage\": \"46.7662%\",\n            \"price\": \"0.0295\",\n            \"ticker\": \"WLDSW\",\n            \"volume\": \"1856\"\n        },\n        {\n            \"change_amount\": \"0.0159\",\n            \"change_percentage\": \"46.6276%\",\n            \"price\": \"0.05\",\n            \"ticker\": \"DHAIW\",\n            \"volume\": \"14152\"\n        }\n    ],\n    \"top_losers\": [\n        {\n            \"change_amount\": \"-0.0093\",\n            \"change_percentage\": \"-65.035%\",\n            \"price\": \"0.005\",\n            \"ticker\": \"UKOMW\",\n            \"volume\": \"94830\"\n        },\n        {\n            \"change_amount\": \"-0.46\",\n            \"change_percentage\": \"-60.5263%\",\n            \"price\": \"0.3\",\n            \"ticker\": \"VHAI+A\",\n            \"volume\": \"29229\"\n        },\n        {\n            \"change_amount\": \"-0.0259\",\n            \"change_percentage\": \"-60.373%\",\n            \"price\": \"0.017\",\n            \"ticker\": \"DPCSW\",\n            \"volume\": \"42572\"\n        },\n        {\n            \"change_amount\": \"-0.0999\",\n            \"change_percentage\": \"-58.7647%\",\n            \"price\": \"0.0701\",\n            \"ticker\": \"GUT^#\",\n            \"volume\": \"146643\"\n        },\n        {\n            \"change_amount\": \"-0.457\",\n            \"change_percentage\": \"-57.125%\",\n            \"price\": \"0.343\",\n            \"ticker\": \"TDW+\",\n            \"volume\": \"4827\"\n        },\n        {\n            \"change_amount\": \"-0.0105\",\n            \"change_percentage\": \"-50.2392%\",\n            \"price\": \"0.0104\",\n            \"ticker\": \"NCPLW\",\n            \"volume\": \"10000\"\n        },\n        {\n            \"change_amount\": \"-0.0035\",\n            \"change_percentage\": \"-50.0%\",\n            \"price\": \"0.0035\",\n            \"ticker\": \"SNAXW\",\n            \"volume\": \"45537\"\n        },\n        {\n            \"change_amount\": \"-0.0079\",\n            \"change_percentage\": \"-46.7456%\",\n            \"price\": \"0.009\",\n            \"ticker\": \"CMAXW\",\n            \"volume\": \"107400\"\n        },\n        {\n            \"change_amount\": \"-0.037\",\n            \"change_percentage\": \"-46.25%\",\n            \"price\": \"0.043\",\n            \"ticker\": \"BNAIW\",\n            \"volume\": \"51894\"\n        },\n        {\n            \"change_amount\": \"-0.0128\",\n            \"change_percentage\": \"-45.5516%\",\n            \"price\": \"0.0153\",\n            \"ticker\": \"CURIW\",\n            \"volume\": \"38050\"\n        },\n        {\n            \"change_amount\": \"-0.165\",\n            \"change_percentage\": \"-43.5356%\",\n            \"price\": \"0.214\",\n            \"ticker\": \"SING\",\n            \"volume\": \"6882129\"\n        },\n        {\n            \"change_amount\": \"-0.0995\",\n            \"change_percentage\": \"-43.3551%\",\n            \"price\": \"0.13\",\n            \"ticker\": \"BCTXW\",\n            \"volume\": \"11337\"\n        },\n        {\n            \"change_amount\": \"-0.0201\",\n            \"change_percentage\": \"-42.8571%\",\n            \"price\": \"0.0268\",\n            \"ticker\": \"SABSW\",\n            \"volume\": \"1094\"\n        },\n        {\n            \"change_amount\": \"-0.0508\",\n            \"change_percentage\": \"-42.053%\",\n            \"price\": \"0.07\",\n            \"ticker\": \"CYTHW\",\n            \"volume\": \"1928\"\n        },\n        {\n            \"change_amount\": \"-0.0132\",\n            \"change_percentage\": \"-41.25%\",\n            \"price\": \"0.0188\",\n            \"ticker\": \"VHAI\",\n            \"volume\": \"100292666\"\n        },\n        {\n            \"change_amount\": \"-0.0198\",\n            \"change_percentage\": \"-39.6%\",\n            \"price\": \"0.0302\",\n            \"ticker\": \"EVE+\",\n            \"volume\": \"55370\"\n        },\n        {\n            \"change_amount\": \"-0.0789\",\n            \"change_percentage\": \"-39.4697%\",\n            \"price\": \"0.121\",\n            \"ticker\": \"RVPHW\",\n            \"volume\": \"67240\"\n        },\n        {\n            \"change_amount\": \"-0.4676\",\n            \"change_percentage\": \"-38.3279%\",\n            \"price\": \"0.7524\",\n            \"ticker\": \"EGIO\",\n            \"volume\": \"2745332\"\n        },\n        {\n            \"change_amount\": \"-7.7\",\n            \"change_percentage\": \"-35.192%\",\n            \"price\": \"14.18\",\n            \"ticker\": \"GPUS-D\",\n            \"volume\": \"17393\"\n        },\n        {\n            \"change_amount\": \"-0.0059\",\n            \"change_percentage\": \"-34.9112%\",\n            \"price\": \"0.011\",\n            \"ticker\": \"LFLYW\",\n            \"volume\": \"20000\"\n        }\n    ]\n};\nconst default_MarketStatus = {\n    \"endpoint\": \"Global Market Open & Close Status\",\n    \"markets\": [\n        {\n            \"current_status\": \"open\",\n            \"local_close\": \"16:15\",\n            \"local_open\": \"09:30\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"NASDAQ, NYSE, AMEX, BATS\",\n            \"region\": \"United States\"\n        },\n        {\n            \"current_status\": \"open\",\n            \"local_close\": \"16:00\",\n            \"local_open\": \"09:30\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"Toronto, Toronto Ventures\",\n            \"region\": \"Canada\"\n        },\n        {\n            \"current_status\": \"closed\",\n            \"local_close\": \"16:30\",\n            \"local_open\": \"08:00\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"London\",\n            \"region\": \"United Kingdom\"\n        },\n        {\n            \"current_status\": \"closed\",\n            \"local_close\": \"20:00\",\n            \"local_open\": \"08:00\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"XETRA, Berlin, Frankfurt, Munich, Stuttgart\",\n            \"region\": \"Germany\"\n        },\n        {\n            \"current_status\": \"closed\",\n            \"local_close\": \"17:30\",\n            \"local_open\": \"09:00\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"Paris\",\n            \"region\": \"France\"\n        },\n        {\n            \"current_status\": \"closed\",\n            \"local_close\": \"17:30\",\n            \"local_open\": \"09:00\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"Barcelona, Madrid\",\n            \"region\": \"Spain\"\n        },\n        {\n            \"current_status\": \"closed\",\n            \"local_close\": \"16:30\",\n            \"local_open\": \"08:00\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"Lisbon\",\n            \"region\": \"Portugal\"\n        },\n        {\n            \"current_status\": \"closed\",\n            \"local_close\": \"15:00\",\n            \"local_open\": \"09:00\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"Noon trading break from 11:30 to 12:30 local time\",\n            \"primary_exchanges\": \"Tokyo\",\n            \"region\": \"Japan\"\n        },\n        {\n            \"current_status\": \"closed\",\n            \"local_close\": \"15:30\",\n            \"local_open\": \"09:15\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"NSE, BSE\",\n            \"region\": \"India\"\n        },\n        {\n            \"current_status\": \"closed\",\n            \"local_close\": \"15:00\",\n            \"local_open\": \"09:30\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"Noon trading break from 11:30 to 13:00 local time\",\n            \"primary_exchanges\": \"Shanghai, Shenzhen\",\n            \"region\": \"Mainland China\"\n        },\n        {\n            \"current_status\": \"closed\",\n            \"local_close\": \"16:00\",\n            \"local_open\": \"09:30\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"Noon trading break from 12:00 to 13:00 local time\",\n            \"primary_exchanges\": \"Hong Kong\",\n            \"region\": \"Hong Kong\"\n        },\n        {\n            \"current_status\": \"open\",\n            \"local_close\": \"17:30\",\n            \"local_open\": \"10:00\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"Sao Paolo\",\n            \"region\": \"Brazil\"\n        },\n        {\n            \"current_status\": \"open\",\n            \"local_close\": \"15:00\",\n            \"local_open\": \"08:30\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"Mexico\",\n            \"region\": \"Mexico\"\n        },\n        {\n            \"current_status\": \"closed\",\n            \"local_close\": \"17:00\",\n            \"local_open\": \"09:00\",\n            \"market_type\": \"Equity\",\n            \"notes\": \"\",\n            \"primary_exchanges\": \"Johannesburg\",\n            \"region\": \"South Africa\"\n        },\n        {\n            \"current_status\": \"open\",\n            \"local_close\": \"23:59\",\n            \"local_open\": \"00:00\",\n            \"market_type\": \"Forex\",\n            \"notes\": \"The forex market is open 24 hours a day, EXCEPT between 16:00 EST on Friday and 17:00 EST on Sunday\",\n            \"primary_exchanges\": \"Global\",\n            \"region\": \"Global\"\n        },\n        {\n            \"current_status\": \"open\",\n            \"local_close\": \"23:59\",\n            \"local_open\": \"00:00\",\n            \"market_type\": \"Cryptocurrency\",\n            \"notes\": \"The cryptocurrency market is open 24 hours a day\",\n            \"primary_exchanges\": \"Global\",\n            \"region\": \"Global\"\n        }\n    ]\n};\nconst default_NewsSentiments = {\n    \"feed\": [\n        {\n            \"authors\": [],\n            \"banner_image\": null,\n            \"category_within_source\": \"Investing\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": -0.035838,\n            \"source\": \"CNBC\",\n            \"source_domain\": \"www.cnbc.com\",\n            \"summary\": \"The S&P 500 and the Nasdaq Composite posted back-to-back gains on Tuesday. Here's what CNBC TV is watching going into Wednesday.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.049835\",\n                    \"ticker\": \"C\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bearish\",\n                    \"ticker_sentiment_score\": \"-0.230288\"\n                },\n                {\n                    \"relevance_score\": \"0.049835\",\n                    \"ticker\": \"BAC\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.016016\"\n                },\n                {\n                    \"relevance_score\": \"0.099476\",\n                    \"ticker\": \"ESS\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.105067\"\n                },\n                {\n                    \"relevance_score\": \"0.049835\",\n                    \"ticker\": \"WFC\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bearish\",\n                    \"ticker_sentiment_score\": \"-0.213248\"\n                },\n                {\n                    \"relevance_score\": \"0.049835\",\n                    \"ticker\": \"GM\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.0\"\n                },\n                {\n                    \"relevance_score\": \"0.049835\",\n                    \"ticker\": \"MS\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bearish\",\n                    \"ticker_sentiment_score\": \"-0.230288\"\n                },\n                {\n                    \"relevance_score\": \"0.049835\",\n                    \"ticker\": \"XOM\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.0\"\n                },\n                {\n                    \"relevance_score\": \"0.049835\",\n                    \"ticker\": \"CCI\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.124191\"\n                },\n                {\n                    \"relevance_score\": \"0.049835\",\n                    \"ticker\": \"GS\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bearish\",\n                    \"ticker_sentiment_score\": \"-0.19922\"\n                },\n                {\n                    \"relevance_score\": \"0.099476\",\n                    \"ticker\": \"MAA\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.105067\"\n                },\n                {\n                    \"relevance_score\": \"0.049835\",\n                    \"ticker\": \"CGC\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.081314\"\n                }\n            ],\n            \"time_published\": \"20240910T233553\",\n            \"title\": \"Wednesday's big stock stories: What's likely to move the market in the next trading session\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.2\",\n                    \"topic\": \"Life Sciences\"\n                },\n                {\n                    \"relevance_score\": \"0.2\",\n                    \"topic\": \"Energy & Transportation\"\n                },\n                {\n                    \"relevance_score\": \"0.2\",\n                    \"topic\": \"Finance\"\n                },\n                {\n                    \"relevance_score\": \"0.451494\",\n                    \"topic\": \"Economy - Monetary\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Financial Markets\"\n                },\n                {\n                    \"relevance_score\": \"0.2\",\n                    \"topic\": \"Manufacturing\"\n                },\n                {\n                    \"relevance_score\": \"0.2\",\n                    \"topic\": \"Real Estate & Construction\"\n                }\n            ],\n            \"url\": \"https://www.cnbc.com/2024/09/10/wednesdays-stock-stories-whats-likely-to-move-the-market.html\"\n        },\n        {\n            \"authors\": [\n                \"Jason Nelson\"\n            ],\n            \"banner_image\": \"https://cdn.decrypt.co/resize/1024/height/512/wp-content/uploads/2023/08/elon-musk-x-twitter-gID_7.jpeg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.267597,\n            \"source\": \"Decrypt.co\",\n            \"source_domain\": \"decrypt.co\",\n            \"summary\": \"The Tesla CEO opined that robots will bring both comfort and a human existential crisis.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.325208\",\n                    \"ticker\": \"OPTGF\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.455035\"\n                },\n                {\n                    \"relevance_score\": \"0.083541\",\n                    \"ticker\": \"NVDA\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"-0.060264\"\n                },\n                {\n                    \"relevance_score\": \"0.246999\",\n                    \"ticker\": \"TSLA\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.092328\"\n                }\n            ],\n            \"time_published\": \"20240910T233510\",\n            \"title\": \"AI, Robotics Advances Will Bring 'Crisis of Meaning', Elon Musk Says\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Manufacturing\"\n                }\n            ],\n            \"url\": \"https://decrypt.co/248815/ai-robotics-advances-will-bring-crisis-of-meaning-elon-musk-says\"\n        },\n        {\n            \"authors\": [\n                \"Xinyi Wu\"\n            ],\n            \"banner_image\": \"https://img.i-scmp.com/cdn-cgi/image/fit=contain,width=1024,format=auto/sites/default/files/d8/images/canvas/2024/09/10/aaa13c16-5751-4fac-b19b-de95ff31e7c5_5158feb3.jpg\",\n            \"category_within_source\": \"Companies\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.211383,\n            \"source\": \"South China Morning Post\",\n            \"source_domain\": \"www.scmp.com\",\n            \"summary\": \"InvestHK has assisted nine medical technology companies to set up or expand their businesses, attracting US$7.7 million of investments.\",\n            \"ticker_sentiment\": [],\n            \"time_published\": \"20240910T233008\",\n            \"title\": \"Regulatory support, connector role a boon to Hong Kong's med-tech hub ambition\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.158519\",\n                    \"topic\": \"Mergers & Acquisitions\"\n                }\n            ],\n            \"url\": \"https://www.scmp.com/business/banking-finance/article/3277978/hong-kongs-regulatory-support-connector-role-appeal-investors-medical-tech-firms-say\"\n        },\n        {\n            \"authors\": [\n                \"Globe Newswire\"\n            ],\n            \"banner_image\": \"https://ml.globenewswire.com/Resource/Download/c89c4483-c52b-469c-9c2a-0cd591045666/pharmaceutical-packaging-equipment-market.jpg\",\n            \"category_within_source\": \"General\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.16714,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": \"Wilmington, Delaware, United States, Transparency Market Research, Inc. , Sept. 10, 2024 ( GLOBE NEWSWIRE ) -- The global pharmaceutical packaging equipment market ( 医薬品包装装置市場 ) was projected to attain US$ 5.6 billion in 2023.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.03916\",\n                    \"ticker\": \"GOOG\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.0\"\n                },\n                {\n                    \"relevance_score\": \"0.117104\",\n                    \"ticker\": \"WMGTF\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.052862\"\n                }\n            ],\n            \"time_published\": \"20240910T233000\",\n            \"title\": \"Pharmaceutical Packaging Equipment Market Set to Expand at 6.2% CAGR and Hitting USD 10.8 Billion by 2034 | Analysis by Transparency Market Research\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.108179\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/pressreleases/24/09/g40806250/pharmaceutical-packaging-equipment-market-set-to-expand-at-6-2-cagr-and-hitting-usd-10-8-billion-b\"\n        },\n        {\n            \"authors\": [\n                \"Globe Newswire\"\n            ],\n            \"banner_image\": \"https://www.benzinga.com/next-assets/images/schema-image-default.png\",\n            \"category_within_source\": \"News\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.139737,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": \"NEW YORK, Sept. 10, 2024 ( GLOBE NEWSWIRE ) -- Why: Rosen Law Firm, a global investor rights law firm, announces an investigation of potential securities claims on behalf of shareholders of Acadia Healthcare Company, Inc.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.138863\",\n                    \"ticker\": \"NYT\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"-0.010002\"\n                },\n                {\n                    \"relevance_score\": \"0.069697\",\n                    \"ticker\": \"META\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.0\"\n                },\n                {\n                    \"relevance_score\": \"0.400265\",\n                    \"ticker\": \"ACHC\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"-0.033178\"\n                }\n            ],\n            \"time_published\": \"20240910T232100\",\n            \"title\": \"ACADIA HEALTHCARE COMPANY, INC. ANNOUNCEMENT: If You Have Suffered Losses in Acadia Healthcare Company, Inc.  ( NASDAQ: ACHC ) , You Are Encouraged to Contact The Rosen Law Firm About Your Rights - Acadia Healthcare Co  ( NASDAQ:ACHC ) \",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.333333\",\n                    \"topic\": \"Life Sciences\"\n                },\n                {\n                    \"relevance_score\": \"0.744043\",\n                    \"topic\": \"Financial Markets\"\n                },\n                {\n                    \"relevance_score\": \"0.333333\",\n                    \"topic\": \"Manufacturing\"\n                },\n                {\n                    \"relevance_score\": \"0.333333\",\n                    \"topic\": \"Technology\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/pressreleases/24/09/g40806148/acadia-healthcare-company-inc-announcement-if-you-have-suffered-losses-in-acadia-healthcare-compan\"\n        },\n        {\n            \"authors\": [\n                \"Globe Newswire\"\n            ],\n            \"banner_image\": \"https://ml.globenewswire.com/media/46a37084-e0b3-48fa-b515-02e82ff9d30a/small/kaskela-law-logo1-jpg.jpg\",\n            \"category_within_source\": \"News\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.230119,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": 'PHILADELPHIA, Sept. 10, 2024 ( GLOBE NEWSWIRE ) -- Law firm Kaskela Law LLC announces that it is investigating the fairness of the recently announced proposed buyout of PowerSchool Holdings, Inc. PWSC ( \"PowerSchool\" ) stockholders to determine whether the proposed buyout price of $22.80 per ...',\n            \"ticker_sentiment\": [],\n            \"time_published\": \"20240910T231455\",\n            \"title\": \"PowerSchool Holdings, Inc.  ( PWSC )  Shareholder Buyout Investigation Announcement by Kaskela Law LLC: Investors Encouraged to Contact the Firm to Discuss their Legal Rights and Options with Respect to Proposed $22.80 Per Share Buyout Agreement - PowerSchool Holdings  ( NYSE:PWSC ) \",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.214378\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/pressreleases/24/09/g40806078/powerschool-holdings-inc-pwsc-shareholder-buyout-investigation-announcement-by-kaskela-law-llc-inv\"\n        },\n        {\n            \"authors\": [\n                \"Brian Trunzo\"\n            ],\n            \"banner_image\": \"https://images.cointelegraph.com/cdn-cgi/image/format=auto,onerror=redirect,quality=90,width=1200/https://s3.cointelegraph.com/uploads/2024-09/0191ddbf-dc24-735a-81ab-e219299e419a\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Bullish\",\n            \"overall_sentiment_score\": 0.400969,\n            \"source\": \"Cointelegraph\",\n            \"source_domain\": \"cointelegraph.com\",\n            \"summary\": \"As markets continue to evolve and integrate with Web3 - from DeFi to gaming - we're likely to see an explosion of creativity.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.051551\",\n                    \"ticker\": \"RBLX\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"-0.004988\"\n                },\n                {\n                    \"relevance_score\": \"0.051551\",\n                    \"ticker\": \"CRYPTO:BTC\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.314792\"\n                }\n            ],\n            \"time_published\": \"20240910T225950\",\n            \"title\": \"Prediction markets are the killer blockchain app we've been waiting for\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.310843\",\n                    \"topic\": \"Blockchain\"\n                },\n                {\n                    \"relevance_score\": \"0.161647\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://cointelegraph.com/news/prediction-markets-are-the-killer-blockchain-app-we-ve-been-waiting-for\"\n        },\n        {\n            \"authors\": [\n                \"Globe Newswire\"\n            ],\n            \"banner_image\": \"https://ml.globenewswire.com/media/46a37084-e0b3-48fa-b515-02e82ff9d30a/small/kaskela-law-logo1-jpg.jpg\",\n            \"category_within_source\": \"News\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.232633,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": 'PHILADELPHIA, Sept. 10, 2024 ( GLOBE NEWSWIRE ) -- Law firm Kaskela Law LLC announces that it is investigating the fairness of the recently announced proposed buyout of Thoughtworks Holding, Inc. ( \"Thoughtworks\" ) TWKS stockholders to determine whether the proposed buyout price of $4.40 per ...',\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.70749\",\n                    \"ticker\": \"TWKS\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.395594\"\n                }\n            ],\n            \"time_published\": \"20240910T225841\",\n            \"title\": \"Thoughtworks Holdings, Inc.  ( TWKS )  Shareholder Buyout Investigation Announcement by Kaskela Law LLC: Investors Encouraged to Contact the Firm to Discuss their Legal Rights and Options with Respect to Proposed $4.40 Per Share Buyout Agreement - Thoughtworks Holding  ( NASDAQ:TWKS ) \",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.214378\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/pressreleases/24/09/g40805954/thoughtworks-holdings-inc-twks-shareholder-buyout-investigation-announcement-by-kaskela-law-llc-in\"\n        },\n        {\n            \"authors\": [\n                \"Eric Volkman\"\n            ],\n            \"banner_image\": \"https://g.foolcdn.com/editorial/images/790358/exhausted-person-lying-on-the-ground-after-a-workout.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.089634,\n            \"source\": \"Motley Fool\",\n            \"source_domain\": \"www.fool.com\",\n            \"summary\": \"No investor likes a recommendation downgrade.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.155451\",\n                    \"ticker\": \"NKE\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.051624\"\n                },\n                {\n                    \"relevance_score\": \"0.155451\",\n                    \"ticker\": \"BCS\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.044069\"\n                }\n            ],\n            \"time_published\": \"20240910T224746\",\n            \"title\": \"Why Adidas Stock Got Thumped on Tuesday\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.5\",\n                    \"topic\": \"Finance\"\n                },\n                {\n                    \"relevance_score\": \"0.161647\",\n                    \"topic\": \"Financial Markets\"\n                },\n                {\n                    \"relevance_score\": \"0.5\",\n                    \"topic\": \"Manufacturing\"\n                }\n            ],\n            \"url\": \"https://www.fool.com/investing/2024/09/10/why-adidas-stock-got-thumped-on-tuesday/\"\n        },\n        {\n            \"authors\": [],\n            \"banner_image\": null,\n            \"category_within_source\": \"Top News\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.077034,\n            \"source\": \"CNBC\",\n            \"source_domain\": \"www.cnbc.com\",\n            \"summary\": \"A recent slew of streaming deals are showcasing the NFL's push into broadening its fanbase and viewership.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.168884\",\n                    \"ticker\": \"NFLX\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.040596\"\n                },\n                {\n                    \"relevance_score\": \"0.113062\",\n                    \"ticker\": \"GOOG\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.021073\"\n                }\n            ],\n            \"time_published\": \"20240910T224251\",\n            \"title\": \"Streaming deals are key to future of NFL viewership, fandom\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                }\n            ],\n            \"url\": \"https://www.cnbc.com/2024/09/10/streaming-deals-are-key-to-future-of-nfl-viewership-fandom.html\"\n        },\n        {\n            \"authors\": [\n                \"Globe Newswire\"\n            ],\n            \"banner_image\": \"https://ml.globenewswire.com/media/77ceffdf-31cc-415f-9747-efee950af329/small/telix-main-logo-3-png.png\",\n            \"category_within_source\": \"General\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.119187,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": \"MELBOURNE, Australia, Sept. 11, 2024 ( GLOBE NEWSWIRE ) -- Telix Pharmaceuticals Limited TLX Telix, the Company ) today announces that primary results from its Phase III ZIRCON1 trial have been published in The Lancet Oncology, reporting that Telix's first-in-class investigational PET2 agent, ...\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.12031\",\n                    \"ticker\": \"TLPPF\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.023197\"\n                }\n            ],\n            \"time_published\": \"20240910T223807\",\n            \"title\": \"'Highly Accurate': Telix's Phase III ZIRCON Trial for Kidney Cancer Imaging Published in The Lancet Oncology\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.495866\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/pressreleases/24/09/g40805815/highly-accurate-telixs-phase-iii-zircon-trial-for-kidney-cancer-imaging-published-in-the-lancet-on\"\n        },\n        {\n            \"authors\": [\n                \"Telix Pharmaceuticals Limited\"\n            ],\n            \"banner_image\": \"https://ml.globenewswire.com/Resource/Download/77ceffdf-31cc-415f-9747-efee950af329\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.128627,\n            \"source\": \"GlobeNewswire\",\n            \"source_domain\": \"www.globenewswire.com\",\n            \"summary\": \"MELBOURNE, Australia, Sept. 11, 2024 ( GLOBE NEWSWIRE ) -- Telix Pharmaceuticals Limited ( ASX: TLX, Telix, the Company ) today announces that primary results from its Phase III ZIRCON1 trial have been published in The Lancet Oncology, reporting that Telix's first-in-class investigational PET2 ...\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.101154\",\n                    \"ticker\": \"TLPPF\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.033634\"\n                }\n            ],\n            \"time_published\": \"20240910T223800\",\n            \"title\": \"'Highly Accurate': Telix's Phase III ZIRCON Trial for Kidney Cancer Imaging Published in The Lancet Oncology\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.310843\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.globenewswire.com/news-release/2024/09/10/2944182/0/en/Highly-Accurate-Telix-s-Phase-III-ZIRCON-Trial-for-Kidney-Cancer-Imaging-Published-in-The-Lancet-Oncology.html\"\n        },\n        {\n            \"authors\": [\n                \"Globe Newswire\"\n            ],\n            \"banner_image\": \"https://www.benzinga.com/next-assets/images/schema-image-default.png\",\n            \"category_within_source\": \"News\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.104075,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": 'NEW YORK, Sept. 10, 2024 ( GLOBE NEWSWIRE ) -- WHY: Rosen Law Firm, a global investor rights law firm, announces the filing of a class action lawsuit on behalf of purchasers of securities of Agenus Inc. AGEN between January 23, 2023 and July 17, 2024, both dates inclusive ( the \"Class Period\" ...',\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.306198\",\n                    \"ticker\": \"AGEN\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"-0.078924\"\n                },\n                {\n                    \"relevance_score\": \"0.062761\",\n                    \"ticker\": \"META\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.0\"\n                }\n            ],\n            \"time_published\": \"20240910T223300\",\n            \"title\": \"ROSEN, A LEADING INVESTOR RIGHTS LAW FIRM, Encourages Agenus Inc. Investors to Secure Counsel Before Important Deadline in Securities Class Action - AGEN - Agenus  ( NASDAQ:AGEN ) \",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.5\",\n                    \"topic\": \"Life Sciences\"\n                },\n                {\n                    \"relevance_score\": \"0.5\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.495866\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/pressreleases/24/09/g40805786/rosen-a-leading-investor-rights-law-firm-encourages-agenus-inc-investors-to-secure-counsel-before-\"\n        },\n        {\n            \"authors\": [\n                \"Andrew Hayward\"\n            ],\n            \"banner_image\": \"https://cdn.decrypt.co/resize/1024/height/512/wp-content/uploads/2024/09/x-empire-vouchers-gID_7.png\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.088425,\n            \"source\": \"Decrypt.co\",\n            \"source_domain\": \"decrypt.co\",\n            \"summary\": \"X Empire follows the Notcoin model with NFT vouchers for pre-market token trading, but questions persist around the conversion rate.\",\n            \"ticker_sentiment\": [],\n            \"time_published\": \"20240910T223014\",\n            \"title\": \"Elon Musk-Themed Telegram Game 'X Empire' Opens Pre-Market Trading Ahead of Airdrop\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.838487\",\n                    \"topic\": \"Blockchain\"\n                },\n                {\n                    \"relevance_score\": \"0.108179\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://decrypt.co/248807/elon-musk-telegram-game-x-empire-pre-market-trading-airdrop\"\n        },\n        {\n            \"authors\": [\n                \"Eric Volkman\"\n            ],\n            \"banner_image\": \"https://g.foolcdn.com/editorial/images/790354/finger-about-to-press-a-green-dollar-sign-key-on-a-pc-keyboard.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.266685,\n            \"source\": \"Motley Fool\",\n            \"source_domain\": \"www.fool.com\",\n            \"summary\": \"The company is benefiting from supplying the right kinds of businesses at the right time.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.509589\",\n                    \"ticker\": \"MTRX\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.326374\"\n                }\n            ],\n            \"time_published\": \"20240910T222417\",\n            \"title\": \"Why Matrix Service Stock Rocketed 15% Higher on Tuesday\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.961735\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Real Estate & Construction\"\n                },\n                {\n                    \"relevance_score\": \"0.796627\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.fool.com/investing/2024/09/10/why-matrix-service-stock-rocketed-15-higher-on-tue/\"\n        },\n        {\n            \"authors\": [\n                \"PRNewswire\"\n            ],\n            \"banner_image\": \"https://mma.prnewswire.com/media/1589642/BGM_Logo.jpg\",\n            \"category_within_source\": \"General\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.267584,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": \"BOSTON, Sept. 10, 2024 /PRNewswire/ -- Boston Globe Media announced the launch of B-Side Sports, a new video-first sports platform designed to captivate New England sports fans through video series, podcasts, and a bi-weekly newsletter distributed on Mondays and Fridays.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.110973\",\n                    \"ticker\": \"GOOG\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.118692\"\n                }\n            ],\n            \"time_published\": \"20240910T221400\",\n            \"title\": \"Boston Globe Media Launches B-Side Sports with Strategic Partnership alongside Shadow Lion\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/pressreleases/24/09/n40805643/boston-globe-media-launches-b-side-sports-with-strategic-partnership-alongside-shadow-lion\"\n        },\n        {\n            \"authors\": [\n                \"Michael Juliano\"\n            ],\n            \"banner_image\": \"https://cdn.benzinga.com/files/images/story/2024/09/10/BrianMoynihan-BAC--FlickerCCWOrldEconomi.jpeg?width=1200&height=800&fit=crop\",\n            \"category_within_source\": \"News\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.05509,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": \"Bank of America Corp BAC CEO Brian Moynihan praised Warren Buffett on Tuesday as an investor in the company, but said he has not asked the legendary investor why he has lowered his position in Bank of America.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.70749\",\n                    \"ticker\": \"BAC\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"-0.077517\"\n                },\n                {\n                    \"relevance_score\": \"0.104683\",\n                    \"ticker\": \"BRK-A\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.093651\"\n                }\n            ],\n            \"time_published\": \"20240910T220722\",\n            \"title\": \"Bank Of America CEO On Buffett's Share Retreat: 'I Don't Know What Exactly He Is Doing ... We Can't Ask' - Bank of America  ( NYSE:BAC ) , First Trust Nasdaq Bank ETF  ( NASDAQ:FTXO ) \",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.158519\",\n                    \"topic\": \"Economy - Monetary\"\n                },\n                {\n                    \"relevance_score\": \"0.938793\",\n                    \"topic\": \"Financial Markets\"\n                },\n                {\n                    \"relevance_score\": \"0.108179\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Finance\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/news/24/09/40805571/bank-of-america-ceo-on-buffetts-share-retreat-i-dont-know-what-exactly-he-is-doing-we-cant-ask\"\n        },\n        {\n            \"authors\": [\n                \"Andrew Throuvalas\"\n            ],\n            \"banner_image\": \"https://cdn.decrypt.co/resize/1024/height/512/wp-content/uploads/2024/05/bitcoin-defi-gID_7.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.11677,\n            \"source\": \"Decrypt.co\",\n            \"source_domain\": \"decrypt.co\",\n            \"summary\": \"Fractal stays loyal to Bitcoin's base layer code, allowing BTC to scale while sharing its security and infrastructure.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.886842\",\n                    \"ticker\": \"CRYPTO:BTC\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.266631\"\n                },\n                {\n                    \"relevance_score\": \"0.07887\",\n                    \"ticker\": \"CRYPTO:ETH\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.0\"\n                }\n            ],\n            \"time_published\": \"20240910T220241\",\n            \"title\": \"What Is Fractal? What You Need to Know About the Buzzy Bitcoin Scaler\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.576289\",\n                    \"topic\": \"Blockchain\"\n                }\n            ],\n            \"url\": \"https://decrypt.co/248798/what-is-fractal-buzzy-bitcoin-scaling-network\"\n        },\n        {\n            \"authors\": [\n                \"Ralph Jennings\"\n            ],\n            \"banner_image\": \"https://cdn.i-scmp.com/sites/default/files/styles/1020x680/public/d8/images/canvas/2024/09/10/9e88f8af-d0bd-4c5d-8747-5a803214bd5e_1f7e49a0.jpg?itok=mey3Hka7&v=1725964232\",\n            \"category_within_source\": \"Economy\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.106231,\n            \"source\": \"South China Morning Post\",\n            \"source_domain\": \"www.scmp.com\",\n            \"summary\": \"Latin American countries, such as Chile, Bolivia, Mexico and Peru, are placing extra scrutiny on overseas investment in their lithium industries.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.100168\",\n                    \"ticker\": \"MCO\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.123507\"\n                },\n                {\n                    \"relevance_score\": \"0.033468\",\n                    \"ticker\": \"SZIHF\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.0\"\n                },\n                {\n                    \"relevance_score\": \"0.033468\",\n                    \"ticker\": \"GNENY\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"-0.108198\"\n                },\n                {\n                    \"relevance_score\": \"0.033468\",\n                    \"ticker\": \"CICOY\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.074061\"\n                },\n                {\n                    \"relevance_score\": \"0.066877\",\n                    \"ticker\": \"SQM\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.0\"\n                }\n            ],\n            \"time_published\": \"20240910T220019\",\n            \"title\": \"Chinese firms seek to avoid pitfalls in search of lithium in Latin America\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Energy & Transportation\"\n                },\n                {\n                    \"relevance_score\": \"0.161647\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.scmp.com/economy/global-economy/article/3277973/chinas-firms-seek-avoid-pitfalls-search-key-ev-metal-latin-america-analysts\"\n        },\n        {\n            \"authors\": [\n                \"Motley Fool Transcribing\"\n            ],\n            \"banner_image\": \"https://g.foolcdn.com/misc-assets/fool-transcripts-logo.png\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.256849,\n            \"source\": \"Motley Fool\",\n            \"source_domain\": \"www.fool.com\",\n            \"summary\": \"ASO earnings call for the period ending June 30, 2024.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.004231\",\n                    \"ticker\": \"BAC\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.181944\"\n                },\n                {\n                    \"relevance_score\": \"0.004231\",\n                    \"ticker\": \"MS\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.099315\"\n                },\n                {\n                    \"relevance_score\": \"0.004231\",\n                    \"ticker\": \"CROX\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.184689\"\n                },\n                {\n                    \"relevance_score\": \"0.016921\",\n                    \"ticker\": \"NKE\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.147059\"\n                },\n                {\n                    \"relevance_score\": \"0.02115\",\n                    \"ticker\": \"ASO\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.061133\"\n                },\n                {\n                    \"relevance_score\": \"0.029607\",\n                    \"ticker\": \"DASH\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.055827\"\n                },\n                {\n                    \"relevance_score\": \"0.004231\",\n                    \"ticker\": \"ASCCF\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.184689\"\n                },\n                {\n                    \"relevance_score\": \"0.008461\",\n                    \"ticker\": \"BIRK\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.160778\"\n                },\n                {\n                    \"relevance_score\": \"0.02115\",\n                    \"ticker\": \"BNXYF\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.077306\"\n                }\n            ],\n            \"time_published\": \"20240910T220016\",\n            \"title\": \"Academy Sports And Outdoors  ( ASO )  Q2 2024 Earnings Call Transcript\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.310843\",\n                    \"topic\": \"Economy - Monetary\"\n                },\n                {\n                    \"relevance_score\": \"0.333333\",\n                    \"topic\": \"Retail & Wholesale\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Financial Markets\"\n                },\n                {\n                    \"relevance_score\": \"0.333333\",\n                    \"topic\": \"Manufacturing\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.333333\",\n                    \"topic\": \"Finance\"\n                }\n            ],\n            \"url\": \"https://www.fool.com/earnings/call-transcripts/2024/09/10/academy-sports-and-outdoors-aso-q2-2024-earnings-c/\"\n        },\n        {\n            \"authors\": [\n                \"Canadian National Railway\"\n            ],\n            \"banner_image\": \"https://ml.globenewswire.com/Resource/Download/d8f3f116-ccaf-4c51-af12-154863973974\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.036278,\n            \"source\": \"GlobeNewswire\",\n            \"source_domain\": \"www.globenewswire.com\",\n            \"summary\": \"Operations have recovered but demand weakness persists in key sectors Operations have recovered but demand weakness persists in key sectors ...\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.054983\",\n                    \"ticker\": \"FOREX:CAD\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"-0.029001\"\n                }\n            ],\n            \"time_published\": \"20240910T220000\",\n            \"title\": \"CN Operations have Recovered, Company Updates Outlook Following Labor Disruption\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.682689\",\n                    \"topic\": \"Economy - Monetary\"\n                },\n                {\n                    \"relevance_score\": \"0.158519\",\n                    \"topic\": \"Economy - Fiscal\"\n                },\n                {\n                    \"relevance_score\": \"0.158519\",\n                    \"topic\": \"Financial Markets\"\n                },\n                {\n                    \"relevance_score\": \"0.999995\",\n                    \"topic\": \"Earnings\"\n                }\n            ],\n            \"url\": \"https://www.globenewswire.com/news-release/2024/09/10/2944177/0/en/CN-Operations-have-Recovered-Company-Updates-Outlook-Following-Labor-Disruption.html\"\n        },\n        {\n            \"authors\": [\n                \"Nicol\\xe1s Jose Rodriguez\"\n            ],\n            \"banner_image\": \"https://cdn.benzinga.com/files/images/story/2024/09/10/AI-Generated-Image.jpeg?width=1200&height=800&fit=crop\",\n            \"category_within_source\": \"News\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.301674,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": 'SNDL Inc. SNDL announced on Tuesday that Taranvir \"Tank\" Vander, president of its Liquor Division, is stepping down after two decades of leadership in the liquor industry. Vander, who began his career as a liquor store manager in the early 2000s, is retiring to pursue new opportunities.',\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.183895\",\n                    \"ticker\": \"ACB\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.016079\"\n                },\n                {\n                    \"relevance_score\": \"0.183895\",\n                    \"ticker\": \"OGI\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.401973\"\n                },\n                {\n                    \"relevance_score\": \"0.183895\",\n                    \"ticker\": \"TLRY\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.242233\"\n                },\n                {\n                    \"relevance_score\": \"0.584328\",\n                    \"ticker\": \"SNDL\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.278233\"\n                },\n                {\n                    \"relevance_score\": \"0.183895\",\n                    \"ticker\": \"CGC\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.371917\"\n                },\n                {\n                    \"relevance_score\": \"0.183895\",\n                    \"ticker\": \"HITI\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.384266\"\n                }\n            ],\n            \"time_published\": \"20240910T214956\",\n            \"title\": \"Last Call For SNDL's Liquor President: Stock On The Rocks Amid Leadership Changes - SNDL  ( NASDAQ:SNDL ) \",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.5\",\n                    \"topic\": \"Life Sciences\"\n                },\n                {\n                    \"relevance_score\": \"0.5\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.503496\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/markets/cannabis/24/09/40805431/last-call-for-sndls-liquor-president-stock-on-the-rocks-amid-leadership-changes\"\n        },\n        {\n            \"authors\": [\n                \"PRNewswire\"\n            ],\n            \"banner_image\": \"https://mma.prnewswire.com/media/2502141/Modern_Mattress_Modern_Mattress_Enhances_Guest_Experience_with_I.jpg\",\n            \"category_within_source\": \"News\",\n            \"overall_sentiment_label\": \"Bullish\",\n            \"overall_sentiment_score\": 0.649874,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": \"REGINA, SK, Sept. 10, 2024 /CNW/ - Modern Mattress is thrilled to announce its partnership with XSENSOR, a Calgary-based company at the forefront of pressure-sensing technology.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.101154\",\n                    \"ticker\": \"TSLA\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.508749\"\n                }\n            ],\n            \"time_published\": \"20240910T214900\",\n            \"title\": \"Modern Mattress Enhances Guest Experience with Innovative Sleep Technology\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Manufacturing\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/pressreleases/24/09/n40805432/modern-mattress-enhances-guest-experience-with-innovative-sleep-technology\"\n        },\n        {\n            \"authors\": [\n                \"Eric Volkman\"\n            ],\n            \"banner_image\": \"https://g.foolcdn.com/editorial/images/790351/person-using-a-laptop-and-tablet-simultaneously.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Bullish\",\n            \"overall_sentiment_score\": 0.375741,\n            \"source\": \"Motley Fool\",\n            \"source_domain\": \"www.fool.com\",\n            \"summary\": \"The company will surely benefit from an anticipated AI product rollout.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.791422\",\n                    \"ticker\": \"MSFT\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.609763\"\n                }\n            ],\n            \"time_published\": \"20240910T214537\",\n            \"title\": \"Why Microsoft Stock Topped the Market Today\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.108179\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.fool.com/investing/2024/09/10/why-microsoft-stock-topped-the-market-today/\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default25.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.205735,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"The latest trading day saw SoFi Technologies, Inc. (SOFI) settling at $7.05, representing a -0.42% change from its previous close.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.517534\",\n                    \"ticker\": \"SOFI\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.234008\"\n                }\n            ],\n            \"time_published\": \"20240910T214523\",\n            \"title\": \"SoFi Technologies, Inc.  ( SOFI )  Stock Sinks As Market Gains: What You Should Know\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.986564\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Real Estate & Construction\"\n                },\n                {\n                    \"relevance_score\": \"0.266143\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334243/sofi-technologies-inc-sofi-stock-sinks-as-market-gains-what-you-should-know\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default278.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.214274,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"The latest trading day saw Visa (V) settling at $285.34, representing a -0.09% change from its previous close.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.52949\",\n                    \"ticker\": \"V\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.257938\"\n                }\n            ],\n            \"time_published\": \"20240910T214523\",\n            \"title\": \"Visa  ( V )  Stock Sinks As Market Gains: What You Should Know\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.986564\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.266143\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334244/visa-v-stock-sinks-as-market-gains-what-you-should-know\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default231.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.240708,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"The latest trading day saw Realty Income Corp. (O) settling at $62.81, representing a -0.08% change from its previous close.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.450165\",\n                    \"ticker\": \"O\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.185363\"\n                }\n            ],\n            \"time_published\": \"20240910T214523\",\n            \"title\": \"Realty Income Corp.  ( O )  Stock Sinks As Market Gains: What You Should Know\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.95493\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Real Estate & Construction\"\n                },\n                {\n                    \"relevance_score\": \"0.316726\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334242/realty-income-corp-o-stock-sinks-as-market-gains-what-you-should-know\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default223.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.165467,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"TSMC (TSM) reachead $162.43 at the closing of the latest trading day, reflecting a -0.22% change compared to its last close.\",\n            \"ticker_sentiment\": [],\n            \"time_published\": \"20240910T214522\",\n            \"title\": \"TSMC  ( TSM )  Stock Dips While Market Gains: Key Facts\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.976913\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.266143\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334247/tsmc-tsm-stock-dips-while-market-gains-key-facts\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default132.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.179376,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the latest trading session, Chevron (CVX) closed at $138.23, marking a -1.48% move from the previous day.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.592095\",\n                    \"ticker\": \"CVX\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.298686\"\n                }\n            ],\n            \"time_published\": \"20240910T214522\",\n            \"title\": \"Chevron  ( CVX )  Stock Sinks As Market Gains: What You Should Know\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.95493\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Energy & Transportation\"\n                },\n                {\n                    \"relevance_score\": \"0.214378\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334249/chevron-cvx-stock-sinks-as-market-gains-what-you-should-know\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default308.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.226266,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the latest trading session, IBM (IBM) closed at $205.32, marking a +0.88% move from the previous day.\",\n            \"ticker_sentiment\": [],\n            \"time_published\": \"20240910T214522\",\n            \"title\": \"IBM  ( IBM )  Rises Higher Than Market: Key Facts\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.95493\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.316726\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334245/ibm-ibm-rises-higher-than-market-key-facts\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default66.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.168514,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"Boeing (BA) closed the most recent trading day at $160.07, moving -1.74% from the previous trading session.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.508593\",\n                    \"ticker\": \"BA\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.156084\"\n                }\n            ],\n            \"time_published\": \"20240910T214522\",\n            \"title\": \"Boeing  ( BA )  Stock Sinks As Market Gains: What You Should Know\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.938793\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.161647\",\n                    \"topic\": \"Financial Markets\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Manufacturing\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334248/boeing-ba-stock-sinks-as-market-gains-what-you-should-know\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default236.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.222667,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"Pinterest (PINS) reachead $29.12 at the closing of the latest trading day, reflecting a -0.99% change compared to its last close.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.603594\",\n                    \"ticker\": \"PINS\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.328739\"\n                }\n            ],\n            \"time_published\": \"20240910T214522\",\n            \"title\": \"Pinterest  ( PINS )  Stock Sinks As Market Gains: Here's Why\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.986564\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.161647\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334246/pinterest-pins-stock-sinks-as-market-gains-heres-why\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default152.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.169715,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the latest trading session, Alphabet (GOOGL) closed at $148.66, marking a -0.03% move from the previous day.\",\n            \"ticker_sentiment\": [],\n            \"time_published\": \"20240910T214521\",\n            \"title\": \"Alphabet  ( GOOGL )  Stock Sinks As Market Gains: Here's Why\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.961735\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.316726\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334253/alphabet-googl-stock-sinks-as-market-gains-heres-why\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default357.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.198196,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"Meta Platforms (META) reachead $504.79 at the closing of the latest trading day, reflecting no change compared to its last close.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.535653\",\n                    \"ticker\": \"META\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.322034\"\n                }\n            ],\n            \"time_published\": \"20240910T214521\",\n            \"title\": \"Meta Platforms  ( META )  Flat As Market Gains: What You Should Know\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.961735\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.316726\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334251/meta-platforms-meta-flat-as-market-gains-what-you-should-know\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default72.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.211569,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the latest trading session, Vertiv Holdings Co. (VRT) closed at $75.47, marking a +1.33% move from the previous day.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.582526\",\n                    \"ticker\": \"VRT\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.320316\"\n                }\n            ],\n            \"time_published\": \"20240910T214521\",\n            \"title\": \"Vertiv Holdings Co.  ( VRT )  Rises Higher Than Market: Key Facts\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.95493\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.316726\",\n                    \"topic\": \"Financial Markets\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Manufacturing\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334254/vertiv-holdings-co-vrt-rises-higher-than-market-key-facts\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default175.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.179817,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the closing of the recent trading day, Alphabet Inc. (GOOG) stood at $150.01, denoting a +0.31% change from the preceding trading day.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.648164\",\n                    \"ticker\": \"GOOG\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.301243\"\n                }\n            ],\n            \"time_published\": \"20240910T214521\",\n            \"title\": \"Here's Why Alphabet Inc.  ( GOOG )  Gained But Lagged the Market Today\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.972476\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.365926\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334252/heres-why-alphabet-inc-goog-gained-but-lagged-the-market-today\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default205.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.200605,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"Micron (MU) reachead $86.85 at the closing of the latest trading day, reflecting a +0.67% change compared to its last close.\",\n            \"ticker_sentiment\": [],\n            \"time_published\": \"20240910T214521\",\n            \"title\": \"Micron  ( MU )  Beats Stock Market Upswing: What Investors Need to Know\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.928769\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.266143\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334250/micron-mu-beats-stock-market-upswing-what-investors-need-to-know\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default277.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.133971,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the closing of the recent trading day, Caterpillar (CAT) stood at $334.16, denoting a +0.04% change from the preceding trading day.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.592095\",\n                    \"ticker\": \"CAT\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.18344\"\n                }\n            ],\n            \"time_published\": \"20240910T214520\",\n            \"title\": \"Caterpillar  ( CAT )  Ascends But Remains Behind Market: Some Facts to Note\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.972476\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.316726\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334255/caterpillar-cat-ascends-but-remains-behind-market-some-facts-to-note\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default171.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.155897,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the latest trading session, PulteGroup (PHM) closed at $132.70, marking a +0.84% move from the previous day.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.461006\",\n                    \"ticker\": \"PHM\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.13111\"\n                }\n            ],\n            \"time_published\": \"20240910T214520\",\n            \"title\": \"PulteGroup  ( PHM )  Laps the Stock Market: Here's Why\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.976913\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Real Estate & Construction\"\n                },\n                {\n                    \"relevance_score\": \"0.266143\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334256/pultegroup-phm-laps-the-stock-market-heres-why\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default53.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.20486,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"Arista Networks (ANET) concluded the recent trading session at $326.75, signifying a +0.61% move from its prior day's close.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.526455\",\n                    \"ticker\": \"ANET\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.354969\"\n                }\n            ],\n            \"time_published\": \"20240910T214520\",\n            \"title\": \"Arista Networks  ( ANET )  Outperforms Broader Market: What You Need to Know\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.938793\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Technology\"\n                },\n                {\n                    \"relevance_score\": \"0.316726\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334258/arista-networks-anet-outperforms-broader-market-what-you-need-to-know\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default324.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.153847,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the latest trading session, 3M (MMM) closed at $130.09, marking a +1.27% move from the previous day.\",\n            \"ticker_sentiment\": [],\n            \"time_published\": \"20240910T214520\",\n            \"title\": \"3M  ( MMM )  Laps the Stock Market: Here's Why\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.961735\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.266143\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334257/3m-mmm-laps-the-stock-market-heres-why\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default98.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.222978,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the most recent trading session, Pfizer (PFE) closed at $29.74, indicating a +1.11% shift from the previous trading day.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.549988\",\n                    \"ticker\": \"PFE\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.281325\"\n                }\n            ],\n            \"time_published\": \"20240910T214519\",\n            \"title\": \"Why Pfizer  ( PFE )  Outpaced the Stock Market Today\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.961735\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Life Sciences\"\n                },\n                {\n                    \"relevance_score\": \"0.316726\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334261/why-pfizer-pfe-outpaced-the-stock-market-today\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default273.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.205874,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the closing of the recent trading day, Netflix (NFLX) stood at $673.62, denoting a -0.27% change from the preceding trading day.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.590482\",\n                    \"ticker\": \"NFLX\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.275012\"\n                }\n            ],\n            \"time_published\": \"20240910T214519\",\n            \"title\": \"Netflix  ( NFLX )  Stock Slides as Market Rises: Facts to Know Before You Trade\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.95493\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.266143\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334259/netflix-nflx-stock-slides-as-market-rises-facts-to-know-before-you-trade\"\n        },\n        {\n            \"authors\": [\n                \"Zacks Equity Research\"\n            ],\n            \"banner_image\": \"https://staticx-tuner.zacks.com/images/default_article_images/default1.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.190858,\n            \"source\": \"Zacks Commentary\",\n            \"source_domain\": \"www.zacks.com\",\n            \"summary\": \"In the most recent trading session, Costco (COST) closed at $894.29, indicating a -0.25% shift from the previous trading day.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.55992\",\n                    \"ticker\": \"COST\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.287915\"\n                }\n            ],\n            \"time_published\": \"20240910T214519\",\n            \"title\": \"Costco  ( COST )  Stock Sinks As Market Gains: Here's Why\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.983783\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Retail & Wholesale\"\n                },\n                {\n                    \"relevance_score\": \"0.214378\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.zacks.com/stock/news/2334260/costco-cost-stock-sinks-as-market-gains-heres-why\"\n        },\n        {\n            \"authors\": [\n                \"NuLegacy Gold Corporation\"\n            ],\n            \"banner_image\": \"https://ml.globenewswire.com/Resource/Download/75e6bef7-69e1-4828-a7e2-5657bda8f98e\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.121221,\n            \"source\": \"GlobeNewswire\",\n            \"source_domain\": \"www.globenewswire.com\",\n            \"summary\": \"By regulatory requirement,THIS NEWS RELEASE IS NOT FOR DISTRIBUTION TO U.S. NEWSWIRE SERVICES OR FOR DISSEMINATION IN THE UNITED STATES ...\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.139064\",\n                    \"ticker\": \"NULGF\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.112408\"\n                },\n                {\n                    \"relevance_score\": \"0.034933\",\n                    \"ticker\": \"MALRF\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"-0.004918\"\n                }\n            ],\n            \"time_published\": \"20240910T214500\",\n            \"title\": \"NuLegacy Gold Reports Closing of Cost Rationalization Agreement\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.310843\",\n                    \"topic\": \"Economy - Monetary\"\n                },\n                {\n                    \"relevance_score\": \"0.451494\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.globenewswire.com/news-release/2024/09/10/2944174/0/en/NuLegacy-Gold-Reports-Closing-of-Cost-Rationalization-Agreement.html\"\n        },\n        {\n            \"authors\": [\n                \"Turner Wright\"\n            ],\n            \"banner_image\": \"https://images.cointelegraph.com/cdn-cgi/image/format=auto,onerror=redirect,quality=90,width=1200/https://s3.cointelegraph.com/uploads/2024-09/0191dda5-ca1c-7ee9-aa98-4e5392646a78\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.148912,\n            \"source\": \"Cointelegraph\",\n            \"source_domain\": \"cointelegraph.com\",\n            \"summary\": \"The CEO of OpenSea reported receiving a Wells notice from the SEC in August, suggesting that the commission could be taking a new regulatory approach to NFTs.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.100308\",\n                    \"ticker\": \"DKNG\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.049636\"\n                }\n            ],\n            \"time_published\": \"20240910T213917\",\n            \"title\": \"Digital Chamber calls for Congress to address SEC actions against NFTs\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.682689\",\n                    \"topic\": \"Blockchain\"\n                },\n                {\n                    \"relevance_score\": \"0.360215\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://cointelegraph.com/news/digital-chamber-congressional-action-sec-nft-platforms\"\n        },\n        {\n            \"authors\": [\n                \"Eric Volkman\"\n            ],\n            \"banner_image\": \"https://g.foolcdn.com/editorial/images/790348/kitten-with-its-tongue-out-and-eyes-closed.jpg\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Bullish\",\n            \"overall_sentiment_score\": 0.420723,\n            \"source\": \"Motley Fool\",\n            \"source_domain\": \"www.fool.com\",\n            \"summary\": \"It's an analyst favorite for a clutch of reasons.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.645516\",\n                    \"ticker\": \"CHWY\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.582586\"\n                },\n                {\n                    \"relevance_score\": \"0.288893\",\n                    \"ticker\": \"GS\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.359825\"\n                },\n                {\n                    \"relevance_score\": \"0.146916\",\n                    \"ticker\": \"MS\",\n                    \"ticker_sentiment_label\": \"Somewhat-Bullish\",\n                    \"ticker_sentiment_score\": \"0.252544\"\n                }\n            ],\n            \"time_published\": \"20240910T213512\",\n            \"title\": \"Why Chewy Stock Soared by 6% Today\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.5\",\n                    \"topic\": \"Retail & Wholesale\"\n                },\n                {\n                    \"relevance_score\": \"0.108179\",\n                    \"topic\": \"Financial Markets\"\n                },\n                {\n                    \"relevance_score\": \"0.158519\",\n                    \"topic\": \"Earnings\"\n                },\n                {\n                    \"relevance_score\": \"0.5\",\n                    \"topic\": \"Finance\"\n                }\n            ],\n            \"url\": \"https://www.fool.com/investing/2024/09/10/why-chewy-stock-soared-by-6-today/\"\n        },\n        {\n            \"authors\": [\n                \"PRNewswire\"\n            ],\n            \"banner_image\": \"https://mma.prnewswire.com/media/2502157/DIMMAK_Runway.jpg\",\n            \"category_within_source\": \"General\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.319084,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": \"DIM MAK x TOEI ANIMATION RUNWAY PRESENTATION NEW YORK FASHION WEEK NEW YORK, Sept. 10, 2024 /PRNewswire/ -- Steve Aoki returned to New York Fashion Week this season with DIM MAK x ONE PIECE in partnership with Toei Animation to present a groundbreaking immersive runway experience on September ...\",\n            \"ticker_sentiment\": [],\n            \"time_published\": \"20240910T213500\",\n            \"title\": \"STEVE AOKI RETURNS TO NYFW TO PRESENT DIM MAK X ONE PIECE IN PARTNERSHIP WITH TOEI ANIMATION\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"0.108179\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/pressreleases/24/09/n40805220/steve-aoki-returns-to-nyfw-to-present-dim-mak-x-one-piece-in-partnership-with-toei-animation\"\n        },\n        {\n            \"authors\": [\n                \"Sienna Senior Living\"\n            ],\n            \"banner_image\": \"https://ml.globenewswire.com/Resource/Download/ac969f39-0111-4903-8faa-0cdee524eb4e\",\n            \"category_within_source\": \"n/a\",\n            \"overall_sentiment_label\": \"Neutral\",\n            \"overall_sentiment_score\": 0.127548,\n            \"source\": \"GlobeNewswire\",\n            \"source_domain\": \"www.globenewswire.com\",\n            \"summary\": \"NOT FOR DISSEMINATION TO U.S. NEWS WIRE SERVICES OR FOR DISSEMINATION IN THE UNITED STATES ...\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.148731\",\n                    \"ticker\": \"LWSCF\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.115001\"\n                },\n                {\n                    \"relevance_score\": \"0.074692\",\n                    \"ticker\": \"MORN\",\n                    \"ticker_sentiment_label\": \"Neutral\",\n                    \"ticker_sentiment_score\": \"0.029628\"\n                }\n            ],\n            \"time_published\": \"20240910T213300\",\n            \"title\": \"Sienna Announces Offering of $150 Million Aggregate Principal Amount of 4.436% Series D Senior Unsecured Debentures\",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Finance\"\n                },\n                {\n                    \"relevance_score\": \"0.310843\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.globenewswire.com/news-release/2024/09/10/2944173/0/en/Sienna-Announces-Offering-of-150-Million-Aggregate-Principal-Amount-of-4-436-Series-D-Senior-Unsecured-Debentures.html\"\n        },\n        {\n            \"authors\": [\n                \"Benzinga Insights\"\n            ],\n            \"banner_image\": \"https://www.benzinga.com/files/images/story/2024/1726003821_0.png\",\n            \"category_within_source\": \"Trading\",\n            \"overall_sentiment_label\": \"Somewhat-Bullish\",\n            \"overall_sentiment_score\": 0.238974,\n            \"source\": \"Benzinga\",\n            \"source_domain\": \"www.benzinga.com\",\n            \"summary\": \"Copart CPRT has outperformed the market over the past 15 years by 10.88% on an annualized basis producing an average annual return of 22.37%. Currently, Copart has a market capitalization of $47.64 billion.\",\n            \"ticker_sentiment\": [\n                {\n                    \"relevance_score\": \"0.95919\",\n                    \"ticker\": \"CPRT\",\n                    \"ticker_sentiment_label\": \"Bullish\",\n                    \"ticker_sentiment_score\": \"0.384695\"\n                }\n            ],\n            \"time_published\": \"20240910T213024\",\n            \"title\": \"$1000 Invested In This Stock 15 Years Ago Would Be Worth $21,000 Today - Copart  ( NASDAQ:CPRT ) \",\n            \"topics\": [\n                {\n                    \"relevance_score\": \"1.0\",\n                    \"topic\": \"Retail & Wholesale\"\n                },\n                {\n                    \"relevance_score\": \"0.108179\",\n                    \"topic\": \"Financial Markets\"\n                }\n            ],\n            \"url\": \"https://www.benzinga.com/insights/news/24/09/40805144/1000-invested-in-this-stock-15-years-ago-would-be-worth-21-000-today\"\n        }\n    ],\n    \"items\": \"50\",\n    \"relevance_score_definition\": \"0 < x <= 1, with a higher score indicating higher relevance.\",\n    \"sentiment_score_definition\": \"x <= -0.35: Bearish; -0.35 < x <= -0.15: Somewhat-Bearish; -0.15 < x < 0.15: Neutral; 0.15 <= x < 0.35: Somewhat_Bullish; x >= 0.35: Bullish\"\n};\nconst Devon_default = {\n    name: \"Devon Fennell\",\n    DOB: \"06/09/2001\",\n    phoneNumber: \"229-302-1229\",\n    userName: \"Devon The Investor\",\n    email: \"devon@contact.mail\",\n    password: \"p@ssw0rd\"\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./constants/index.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   capitalize: function() { return /* binding */ capitalize; },\n/* harmony export */   cn: function() { return /* binding */ cn; },\n/* harmony export */   extractUniqueKeys: function() { return /* binding */ extractUniqueKeys; },\n/* harmony export */   formatHeader: function() { return /* binding */ formatHeader; },\n/* harmony export */   generate: function() { return /* binding */ generate; }\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ \"(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n\n\nfunction cn() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\nfunction generate() {\n    const randomKey = (length, otherText)=>{\n        const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        let result = \"\";\n        for(let i = 0; i < length; i++){\n            const randomIndex = Math.floor(Math.random() * characters.length);\n            result += characters[randomIndex];\n        }\n        return result + otherText;\n    };\n    return {\n        randomKey\n    };\n}\nfunction capitalize(key) {\n    return key.charAt(0).toUpperCase() + key.slice(1);\n}\n// Utility function to convert camelCase or snake_case to readable format\nconst formatHeader = (key)=>{\n    // Handle snake_case by splitting at underscores and capitalizing\n    if (key.includes(\"_\")) {\n        return key.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n    }\n    // Handle camelCase by inserting spaces before capital letters and capitalizing\n    return key.replace(/([a-z])([A-Z])/g, \"$1 $2\") // Insert space before capital letters\n    .replace(/^[a-z]/, (str)=>str.toUpperCase()); // Capitalize the first letter\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (formatHeader);\n/* \nFunction to take an array of loosely typed objects\nand extract an array of all the unique keys in the array.\n*/ function extractUniqueKeys(data) {\n    const uniqueKeys = new Set();\n    data.forEach((item)=>{\n        Object.keys(item).forEach((key)=>{\n            uniqueKeys.add(key); // Add each key to the Set\n        });\n    });\n    return Array.from(uniqueKeys); // Convert the Set to an array\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi91dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTRDO0FBQ0o7QUFFakMsU0FBU0U7SUFBRztRQUFHQyxPQUFILHVCQUF1Qjs7SUFDeEMsT0FBT0YsdURBQU9BLENBQUNELDBDQUFJQSxDQUFDRztBQUN0QjtBQUVPLFNBQVNDO0lBQ1osTUFBTUMsWUFBWSxDQUFDQyxRQUFnQkM7UUFDakMsTUFBTUMsYUFBYTtRQUN2QixJQUFJQyxTQUFTO1FBRWIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLFFBQVFJLElBQUs7WUFDN0IsTUFBTUMsY0FBY0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQUtOLFdBQVdGLE1BQU07WUFDaEVHLFVBQVVELFVBQVUsQ0FBQ0csWUFBWTtRQUNyQztRQUVBLE9BQU9GLFNBQVNGO0lBQ2Q7SUFFQSxPQUFPO1FBQ0xGO0lBQ0Y7QUFDSjtBQUVPLFNBQVNVLFdBQVdDLEdBQVc7SUFDcEMsT0FBT0EsSUFBSUMsTUFBTSxDQUFDLEdBQUdDLFdBQVcsS0FBS0YsSUFBSUcsS0FBSyxDQUFDO0FBQ2pEO0FBRUEseUVBQXlFO0FBQ2xFLE1BQU1DLGVBQWUsQ0FBQ0o7SUFDM0IsaUVBQWlFO0lBQ2pFLElBQUlBLElBQUlLLFFBQVEsQ0FBQyxNQUFNO1FBQ3JCLE9BQU9MLElBQ0pNLEtBQUssQ0FBQyxLQUNOQyxHQUFHLENBQUNDLENBQUFBLE9BQVFBLEtBQUtQLE1BQU0sQ0FBQyxHQUFHQyxXQUFXLEtBQUtNLEtBQUtMLEtBQUssQ0FBQyxJQUN0RE0sSUFBSSxDQUFDO0lBQ1Y7SUFFQSwrRUFBK0U7SUFDL0UsT0FBT1QsSUFDSlUsT0FBTyxDQUFDLG1CQUFtQixTQUFTLHNDQUFzQztLQUMxRUEsT0FBTyxDQUFDLFVBQVVDLENBQUFBLE1BQU9BLElBQUlULFdBQVcsS0FBSyw4QkFBOEI7QUFDaEYsRUFBRTtBQUVGLCtEQUFlRSxZQUFZQSxFQUFDO0FBRTVCOzs7QUFHQSxHQUVPLFNBQVNRLGtCQUFvQ0MsSUFBUztJQUMzRCxNQUFNQyxhQUFhLElBQUlDO0lBRXZCRixLQUFLRyxPQUFPLENBQUNDLENBQUFBO1FBQ1RDLE9BQU9DLElBQUksQ0FBQ0YsTUFBTUQsT0FBTyxDQUFDaEIsQ0FBQUE7WUFDdEJjLFdBQVdNLEdBQUcsQ0FBQ3BCLE1BQU0sMEJBQTBCO1FBQ25EO0lBQ0o7SUFFQSxPQUFPcUIsTUFBTUMsSUFBSSxDQUFDUixhQUFhLDhCQUE4QjtBQUMvRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvdXRpbHMudHM/Zjc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIENsYXNzVmFsdWUsIGNsc3ggfSBmcm9tIFwiY2xzeFwiXG5pbXBvcnQgeyB0d01lcmdlIH0gZnJvbSBcInRhaWx3aW5kLW1lcmdlXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGNuKC4uLmlucHV0czogQ2xhc3NWYWx1ZVtdKSB7XG4gIHJldHVybiB0d01lcmdlKGNsc3goaW5wdXRzKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlKCkge1xuICAgIGNvbnN0IHJhbmRvbUtleSA9IChsZW5ndGg6IG51bWJlciwgb3RoZXJUZXh0Pzogc3RyaW5nIHwgbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgICAgIGNvbnN0IGNoYXJhY3RlcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xuICBsZXQgcmVzdWx0ID0gJyc7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzLmxlbmd0aCk7XG4gICAgICByZXN1bHQgKz0gY2hhcmFjdGVyc1tyYW5kb21JbmRleF07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgb3RoZXJUZXh0O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICByYW5kb21LZXlcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplKGtleTogc3RyaW5nKSB7XG4gIHJldHVybiBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7XG59XG5cbi8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gY29udmVydCBjYW1lbENhc2Ugb3Igc25ha2VfY2FzZSB0byByZWFkYWJsZSBmb3JtYXRcbmV4cG9ydCBjb25zdCBmb3JtYXRIZWFkZXIgPSAoa2V5OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAvLyBIYW5kbGUgc25ha2VfY2FzZSBieSBzcGxpdHRpbmcgYXQgdW5kZXJzY29yZXMgYW5kIGNhcGl0YWxpemluZ1xuICBpZiAoa2V5LmluY2x1ZGVzKCdfJykpIHtcbiAgICByZXR1cm4ga2V5XG4gICAgICAuc3BsaXQoJ18nKVxuICAgICAgLm1hcCh3b3JkID0+IHdvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnNsaWNlKDEpKVxuICAgICAgLmpvaW4oJyAnKTtcbiAgfVxuXG4gIC8vIEhhbmRsZSBjYW1lbENhc2UgYnkgaW5zZXJ0aW5nIHNwYWNlcyBiZWZvcmUgY2FwaXRhbCBsZXR0ZXJzIGFuZCBjYXBpdGFsaXppbmdcbiAgcmV0dXJuIGtleVxuICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEgJDInKSAvLyBJbnNlcnQgc3BhY2UgYmVmb3JlIGNhcGl0YWwgbGV0dGVyc1xuICAgIC5yZXBsYWNlKC9eW2Etel0vLCBzdHIgPT4gc3RyLnRvVXBwZXJDYXNlKCkpOyAvLyBDYXBpdGFsaXplIHRoZSBmaXJzdCBsZXR0ZXJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdEhlYWRlcjtcblxuLyogXG5GdW5jdGlvbiB0byB0YWtlIGFuIGFycmF5IG9mIGxvb3NlbHkgdHlwZWQgb2JqZWN0c1xuYW5kIGV4dHJhY3QgYW4gYXJyYXkgb2YgYWxsIHRoZSB1bmlxdWUga2V5cyBpbiB0aGUgYXJyYXkuXG4qL1xuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFVuaXF1ZUtleXM8VCBleHRlbmRzIG9iamVjdD4oZGF0YTogVFtdKTogc3RyaW5nW10ge1xuICBjb25zdCB1bmlxdWVLZXlzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIHVuaXF1ZUtleXMuYWRkKGtleSk7IC8vIEFkZCBlYWNoIGtleSB0byB0aGUgU2V0XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIEFycmF5LmZyb20odW5pcXVlS2V5cyk7IC8vIENvbnZlcnQgdGhlIFNldCB0byBhbiBhcnJheVxufVxuIl0sIm5hbWVzIjpbImNsc3giLCJ0d01lcmdlIiwiY24iLCJpbnB1dHMiLCJnZW5lcmF0ZSIsInJhbmRvbUtleSIsImxlbmd0aCIsIm90aGVyVGV4dCIsImNoYXJhY3RlcnMiLCJyZXN1bHQiLCJpIiwicmFuZG9tSW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJjYXBpdGFsaXplIiwia2V5IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsImZvcm1hdEhlYWRlciIsImluY2x1ZGVzIiwic3BsaXQiLCJtYXAiLCJ3b3JkIiwiam9pbiIsInJlcGxhY2UiLCJzdHIiLCJleHRyYWN0VW5pcXVlS2V5cyIsImRhdGEiLCJ1bmlxdWVLZXlzIiwiU2V0IiwiZm9yRWFjaCIsIml0ZW0iLCJPYmplY3QiLCJrZXlzIiwiYWRkIiwiQXJyYXkiLCJmcm9tIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/M2FjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs":
/*!*****************************************!*\
  !*** ./node_modules/clsx/dist/clsx.mjs ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: function() { return /* binding */ clsx; }\n/* harmony export */ });\nfunction r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}/* harmony default export */ __webpack_exports__[\"default\"] = (clsx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGNBQWMsYUFBYSwrQ0FBK0MsZ0RBQWdELGVBQWUsUUFBUSxJQUFJLDBDQUEwQyx5Q0FBeUMsU0FBZ0IsZ0JBQWdCLHdDQUF3QyxJQUFJLG1EQUFtRCxTQUFTLCtEQUFlLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm1qcz8yYTFmIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKXt2YXIgbz1lLmxlbmd0aDtmb3IodD0wO3Q8bzt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpfWVsc2UgZm9yKGYgaW4gZSllW2ZdJiYobiYmKG4rPVwiIFwiKSxuKz1mKTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCIsbz1hcmd1bWVudHMubGVuZ3RoO2Y8bztmKyspKGU9YXJndW1lbnRzW2ZdKSYmKHQ9cihlKSkmJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBkZWZhdWx0IGNsc3g7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/tailwind-merge/dist/bundle-mjs.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTailwindMerge: function() { return /* binding */ createTailwindMerge; },\n/* harmony export */   extendTailwindMerge: function() { return /* binding */ extendTailwindMerge; },\n/* harmony export */   fromTheme: function() { return /* binding */ fromTheme; },\n/* harmony export */   getDefaultConfig: function() { return /* binding */ getDefaultConfig; },\n/* harmony export */   mergeConfigs: function() { return /* binding */ mergeConfigs; },\n/* harmony export */   twJoin: function() { return /* binding */ twJoin; },\n/* harmony export */   twMerge: function() { return /* binding */ twMerge; },\n/* harmony export */   validators: function() { return /* binding */ validators; }\n/* harmony export */ });\nconst CLASS_PART_SEPARATOR = '-';\nfunction createClassGroupUtils(config) {\n  const classMap = createClassMap(config);\n  const {\n    conflictingClassGroups,\n    conflictingClassGroupModifiers\n  } = config;\n  function getClassGroupId(className) {\n    const classParts = className.split(CLASS_PART_SEPARATOR);\n    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n    if (classParts[0] === '' && classParts.length !== 1) {\n      classParts.shift();\n    }\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n  }\n  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {\n    const conflicts = conflictingClassGroups[classGroupId] || [];\n    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];\n    }\n    return conflicts;\n  }\n  return {\n    getClassGroupId,\n    getConflictingClassGroupIds\n  };\n}\nfunction getGroupRecursive(classParts, classPartObject) {\n  if (classParts.length === 0) {\n    return classPartObject.classGroupId;\n  }\n  const currentClassPart = classParts[0];\n  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;\n  if (classGroupFromNextClassPart) {\n    return classGroupFromNextClassPart;\n  }\n  if (classPartObject.validators.length === 0) {\n    return undefined;\n  }\n  const classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return classPartObject.validators.find(({\n    validator\n  }) => validator(classRest))?.classGroupId;\n}\nconst arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nfunction getGroupIdForArbitraryProperty(className) {\n  if (arbitraryPropertyRegex.test(className)) {\n    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));\n    if (property) {\n      // I use two dots here because one dot is used as prefix for class groups in plugins\n      return 'arbitrary..' + property;\n    }\n  }\n}\n/**\n * Exported for testing only\n */\nfunction createClassMap(config) {\n  const {\n    theme,\n    prefix\n  } = config;\n  const classMap = {\n    nextPart: new Map(),\n    validators: []\n  };\n  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {\n    processClassesRecursively(classGroup, classMap, classGroupId, theme);\n  });\n  return classMap;\n}\nfunction processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {\n  classGroup.forEach(classDefinition => {\n    if (typeof classDefinition === 'string') {\n      const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition === 'function') {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(([key, classGroup]) => {\n      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n}\nfunction getPart(classPartObject, path) {\n  let currentClassPartObject = classPartObject;\n  path.split(CLASS_PART_SEPARATOR).forEach(pathPart => {\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\n      currentClassPartObject.nextPart.set(pathPart, {\n        nextPart: new Map(),\n        validators: []\n      });\n    }\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  });\n  return currentClassPartObject;\n}\nfunction isThemeGetter(func) {\n  return func.isThemeGetter;\n}\nfunction getPrefixedClassGroupEntries(classGroupEntries, prefix) {\n  if (!prefix) {\n    return classGroupEntries;\n  }\n  return classGroupEntries.map(([classGroupId, classGroup]) => {\n    const prefixedClassGroup = classGroup.map(classDefinition => {\n      if (typeof classDefinition === 'string') {\n        return prefix + classDefinition;\n      }\n      if (typeof classDefinition === 'object') {\n        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));\n      }\n      return classDefinition;\n    });\n    return [classGroupId, prefixedClassGroup];\n  });\n}\n\n// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance\nfunction createLruCache(maxCacheSize) {\n  if (maxCacheSize < 1) {\n    return {\n      get: () => undefined,\n      set: () => {}\n    };\n  }\n  let cacheSize = 0;\n  let cache = new Map();\n  let previousCache = new Map();\n  function update(key, value) {\n    cache.set(key, value);\n    cacheSize++;\n    if (cacheSize > maxCacheSize) {\n      cacheSize = 0;\n      previousCache = cache;\n      cache = new Map();\n    }\n  }\n  return {\n    get(key) {\n      let value = cache.get(key);\n      if (value !== undefined) {\n        return value;\n      }\n      if ((value = previousCache.get(key)) !== undefined) {\n        update(key, value);\n        return value;\n      }\n    },\n    set(key, value) {\n      if (cache.has(key)) {\n        cache.set(key, value);\n      } else {\n        update(key, value);\n      }\n    }\n  };\n}\nconst IMPORTANT_MODIFIER = '!';\nfunction createParseClassName(config) {\n  const {\n    separator,\n    experimentalParseClassName\n  } = config;\n  const isSeparatorSingleCharacter = separator.length === 1;\n  const firstSeparatorCharacter = separator[0];\n  const separatorLength = separator.length;\n  // parseClassName inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\n  function parseClassName(className) {\n    const modifiers = [];\n    let bracketDepth = 0;\n    let modifierStart = 0;\n    let postfixModifierPosition;\n    for (let index = 0; index < className.length; index++) {\n      let currentCharacter = className[index];\n      if (bracketDepth === 0) {\n        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {\n          modifiers.push(className.slice(modifierStart, index));\n          modifierStart = index + separatorLength;\n          continue;\n        }\n        if (currentCharacter === '/') {\n          postfixModifierPosition = index;\n          continue;\n        }\n      }\n      if (currentCharacter === '[') {\n        bracketDepth++;\n      } else if (currentCharacter === ']') {\n        bracketDepth--;\n      }\n    }\n    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);\n    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;\n    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;\n    return {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    };\n  }\n  if (experimentalParseClassName) {\n    return function parseClassNameExperimental(className) {\n      return experimentalParseClassName({\n        className,\n        parseClassName\n      });\n    };\n  }\n  return parseClassName;\n}\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */\nfunction sortModifiers(modifiers) {\n  if (modifiers.length <= 1) {\n    return modifiers;\n  }\n  const sortedModifiers = [];\n  let unsortedModifiers = [];\n  modifiers.forEach(modifier => {\n    const isArbitraryVariant = modifier[0] === '[';\n    if (isArbitraryVariant) {\n      sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n      unsortedModifiers = [];\n    } else {\n      unsortedModifiers.push(modifier);\n    }\n  });\n  sortedModifiers.push(...unsortedModifiers.sort());\n  return sortedModifiers;\n}\nfunction createConfigUtils(config) {\n  return {\n    cache: createLruCache(config.cacheSize),\n    parseClassName: createParseClassName(config),\n    ...createClassGroupUtils(config)\n  };\n}\nconst SPLIT_CLASSES_REGEX = /\\s+/;\nfunction mergeClassList(classList, configUtils) {\n  const {\n    parseClassName,\n    getClassGroupId,\n    getConflictingClassGroupIds\n  } = configUtils;\n  /**\n   * Set of classGroupIds in following format:\n   * `{importantModifier}{variantModifiers}{classGroupId}`\n   * @example 'float'\n   * @example 'hover:focus:bg-color'\n   * @example 'md:!pr'\n   */\n  const classGroupsInConflict = new Set();\n  return classList.trim().split(SPLIT_CLASSES_REGEX).map(originalClassName => {\n    const {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    } = parseClassName(originalClassName);\n    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);\n    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n    if (!classGroupId) {\n      if (!hasPostfixModifier) {\n        return {\n          isTailwindClass: false,\n          originalClassName\n        };\n      }\n      classGroupId = getClassGroupId(baseClassName);\n      if (!classGroupId) {\n        return {\n          isTailwindClass: false,\n          originalClassName\n        };\n      }\n      hasPostfixModifier = false;\n    }\n    const variantModifier = sortModifiers(modifiers).join(':');\n    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n    return {\n      isTailwindClass: true,\n      modifierId,\n      classGroupId,\n      originalClassName,\n      hasPostfixModifier\n    };\n  }).reverse()\n  // Last class in conflict wins, so we need to filter conflicting classes in reverse order.\n  .filter(parsed => {\n    if (!parsed.isTailwindClass) {\n      return true;\n    }\n    const {\n      modifierId,\n      classGroupId,\n      hasPostfixModifier\n    } = parsed;\n    const classId = modifierId + classGroupId;\n    if (classGroupsInConflict.has(classId)) {\n      return false;\n    }\n    classGroupsInConflict.add(classId);\n    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(group => classGroupsInConflict.add(modifierId + group));\n    return true;\n  }).reverse().map(parsed => parsed.originalClassName).join(' ');\n}\n\n/**\n * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.\n *\n * Specifically:\n * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js\n * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts\n *\n * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n */\nfunction twJoin() {\n  let index = 0;\n  let argument;\n  let resolvedValue;\n  let string = '';\n  while (index < arguments.length) {\n    if (argument = arguments[index++]) {\n      if (resolvedValue = toValue(argument)) {\n        string && (string += ' ');\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n}\nfunction toValue(mix) {\n  if (typeof mix === 'string') {\n    return mix;\n  }\n  let resolvedValue;\n  let string = '';\n  for (let k = 0; k < mix.length; k++) {\n    if (mix[k]) {\n      if (resolvedValue = toValue(mix[k])) {\n        string && (string += ' ');\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n}\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\n  let configUtils;\n  let cacheGet;\n  let cacheSet;\n  let functionToCall = initTailwindMerge;\n  function initTailwindMerge(classList) {\n    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());\n    configUtils = createConfigUtils(config);\n    cacheGet = configUtils.cache.get;\n    cacheSet = configUtils.cache.set;\n    functionToCall = tailwindMerge;\n    return tailwindMerge(classList);\n  }\n  function tailwindMerge(classList) {\n    const cachedResult = cacheGet(classList);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const result = mergeClassList(classList, configUtils);\n    cacheSet(classList, result);\n    return result;\n  }\n  return function callTailwindMerge() {\n    return functionToCall(twJoin.apply(null, arguments));\n  };\n}\nfunction fromTheme(key) {\n  const themeGetter = theme => theme[key] || [];\n  themeGetter.isThemeGetter = true;\n  return themeGetter;\n}\nconst arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i;\nconst fractionRegex = /^\\d+\\/\\d+$/;\nconst stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nconst lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nconst colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\n// Shadow always begins with x and y offset separated by underscore optionally prepended by inset\nconst shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nconst imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nfunction isLength(value) {\n  return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);\n}\nfunction isArbitraryLength(value) {\n  return getIsArbitraryValue(value, 'length', isLengthOnly);\n}\nfunction isNumber(value) {\n  return Boolean(value) && !Number.isNaN(Number(value));\n}\nfunction isArbitraryNumber(value) {\n  return getIsArbitraryValue(value, 'number', isNumber);\n}\nfunction isInteger(value) {\n  return Boolean(value) && Number.isInteger(Number(value));\n}\nfunction isPercent(value) {\n  return value.endsWith('%') && isNumber(value.slice(0, -1));\n}\nfunction isArbitraryValue(value) {\n  return arbitraryValueRegex.test(value);\n}\nfunction isTshirtSize(value) {\n  return tshirtUnitRegex.test(value);\n}\nconst sizeLabels = /*#__PURE__*/new Set(['length', 'size', 'percentage']);\nfunction isArbitrarySize(value) {\n  return getIsArbitraryValue(value, sizeLabels, isNever);\n}\nfunction isArbitraryPosition(value) {\n  return getIsArbitraryValue(value, 'position', isNever);\n}\nconst imageLabels = /*#__PURE__*/new Set(['image', 'url']);\nfunction isArbitraryImage(value) {\n  return getIsArbitraryValue(value, imageLabels, isImage);\n}\nfunction isArbitraryShadow(value) {\n  return getIsArbitraryValue(value, '', isShadow);\n}\nfunction isAny() {\n  return true;\n}\nfunction getIsArbitraryValue(value, label, testValue) {\n  const result = arbitraryValueRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return typeof label === 'string' ? result[1] === label : label.has(result[1]);\n    }\n    return testValue(result[2]);\n  }\n  return false;\n}\nfunction isLengthOnly(value) {\n  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\n  return lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);\n}\nfunction isNever() {\n  return false;\n}\nfunction isShadow(value) {\n  return shadowRegex.test(value);\n}\nfunction isImage(value) {\n  return imageRegex.test(value);\n}\nconst validators = /*#__PURE__*/Object.defineProperty({\n  __proto__: null,\n  isAny,\n  isArbitraryImage,\n  isArbitraryLength,\n  isArbitraryNumber,\n  isArbitraryPosition,\n  isArbitraryShadow,\n  isArbitrarySize,\n  isArbitraryValue,\n  isInteger,\n  isLength,\n  isNumber,\n  isPercent,\n  isTshirtSize\n}, Symbol.toStringTag, {\n  value: 'Module'\n});\nfunction getDefaultConfig() {\n  const colors = fromTheme('colors');\n  const spacing = fromTheme('spacing');\n  const blur = fromTheme('blur');\n  const brightness = fromTheme('brightness');\n  const borderColor = fromTheme('borderColor');\n  const borderRadius = fromTheme('borderRadius');\n  const borderSpacing = fromTheme('borderSpacing');\n  const borderWidth = fromTheme('borderWidth');\n  const contrast = fromTheme('contrast');\n  const grayscale = fromTheme('grayscale');\n  const hueRotate = fromTheme('hueRotate');\n  const invert = fromTheme('invert');\n  const gap = fromTheme('gap');\n  const gradientColorStops = fromTheme('gradientColorStops');\n  const gradientColorStopPositions = fromTheme('gradientColorStopPositions');\n  const inset = fromTheme('inset');\n  const margin = fromTheme('margin');\n  const opacity = fromTheme('opacity');\n  const padding = fromTheme('padding');\n  const saturate = fromTheme('saturate');\n  const scale = fromTheme('scale');\n  const sepia = fromTheme('sepia');\n  const skew = fromTheme('skew');\n  const space = fromTheme('space');\n  const translate = fromTheme('translate');\n  const getOverscroll = () => ['auto', 'contain', 'none'];\n  const getOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll'];\n  const getSpacingWithAutoAndArbitrary = () => ['auto', isArbitraryValue, spacing];\n  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];\n  const getLengthWithEmptyAndArbitrary = () => ['', isLength, isArbitraryLength];\n  const getNumberWithAutoAndArbitrary = () => ['auto', isNumber, isArbitraryValue];\n  const getPositions = () => ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top'];\n  const getLineStyles = () => ['solid', 'dashed', 'dotted', 'double', 'none'];\n  const getBlendModes = () => ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity'];\n  const getAlign = () => ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch'];\n  const getZeroAndEmpty = () => ['', '0', isArbitraryValue];\n  const getBreaks = () => ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];\n  const getNumber = () => [isNumber, isArbitraryNumber];\n  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];\n  return {\n    cacheSize: 500,\n    separator: ':',\n    theme: {\n      colors: [isAny],\n      spacing: [isLength, isArbitraryLength],\n      blur: ['none', '', isTshirtSize, isArbitraryValue],\n      brightness: getNumber(),\n      borderColor: [colors],\n      borderRadius: ['none', '', 'full', isTshirtSize, isArbitraryValue],\n      borderSpacing: getSpacingWithArbitrary(),\n      borderWidth: getLengthWithEmptyAndArbitrary(),\n      contrast: getNumber(),\n      grayscale: getZeroAndEmpty(),\n      hueRotate: getNumberAndArbitrary(),\n      invert: getZeroAndEmpty(),\n      gap: getSpacingWithArbitrary(),\n      gradientColorStops: [colors],\n      gradientColorStopPositions: [isPercent, isArbitraryLength],\n      inset: getSpacingWithAutoAndArbitrary(),\n      margin: getSpacingWithAutoAndArbitrary(),\n      opacity: getNumber(),\n      padding: getSpacingWithArbitrary(),\n      saturate: getNumber(),\n      scale: getNumber(),\n      sepia: getZeroAndEmpty(),\n      skew: getNumberAndArbitrary(),\n      space: getSpacingWithArbitrary(),\n      translate: getSpacingWithArbitrary()\n    },\n    classGroups: {\n      // Layout\n      /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */\n      aspect: [{\n        aspect: ['auto', 'square', 'video', isArbitraryValue]\n      }],\n      /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       */\n      container: ['container'],\n      /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */\n      columns: [{\n        columns: [isTshirtSize]\n      }],\n      /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */\n      'break-after': [{\n        'break-after': getBreaks()\n      }],\n      /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */\n      'break-before': [{\n        'break-before': getBreaks()\n      }],\n      /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */\n      'break-inside': [{\n        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']\n      }],\n      /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */\n      'box-decoration': [{\n        'box-decoration': ['slice', 'clone']\n      }],\n      /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */\n      box: [{\n        box: ['border', 'content']\n      }],\n      /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */\n      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],\n      /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */\n      float: [{\n        float: ['right', 'left', 'none', 'start', 'end']\n      }],\n      /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */\n      clear: [{\n        clear: ['left', 'right', 'both', 'none', 'start', 'end']\n      }],\n      /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */\n      isolation: ['isolate', 'isolation-auto'],\n      /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */\n      'object-fit': [{\n        object: ['contain', 'cover', 'fill', 'none', 'scale-down']\n      }],\n      /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */\n      'object-position': [{\n        object: [...getPositions(), isArbitraryValue]\n      }],\n      /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      overflow: [{\n        overflow: getOverflow()\n      }],\n      /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      'overflow-x': [{\n        'overflow-x': getOverflow()\n      }],\n      /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      'overflow-y': [{\n        'overflow-y': getOverflow()\n      }],\n      /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      overscroll: [{\n        overscroll: getOverscroll()\n      }],\n      /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      'overscroll-x': [{\n        'overscroll-x': getOverscroll()\n      }],\n      /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      'overscroll-y': [{\n        'overscroll-y': getOverscroll()\n      }],\n      /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */\n      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],\n      /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      inset: [{\n        inset: [inset]\n      }],\n      /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      'inset-x': [{\n        'inset-x': [inset]\n      }],\n      /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      'inset-y': [{\n        'inset-y': [inset]\n      }],\n      /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      start: [{\n        start: [inset]\n      }],\n      /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      end: [{\n        end: [inset]\n      }],\n      /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      top: [{\n        top: [inset]\n      }],\n      /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      right: [{\n        right: [inset]\n      }],\n      /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      bottom: [{\n        bottom: [inset]\n      }],\n      /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      left: [{\n        left: [inset]\n      }],\n      /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */\n      visibility: ['visible', 'invisible', 'collapse'],\n      /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */\n      z: [{\n        z: ['auto', isInteger, isArbitraryValue]\n      }],\n      // Flexbox and Grid\n      /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */\n      basis: [{\n        basis: getSpacingWithAutoAndArbitrary()\n      }],\n      /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */\n      'flex-direction': [{\n        flex: ['row', 'row-reverse', 'col', 'col-reverse']\n      }],\n      /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */\n      'flex-wrap': [{\n        flex: ['wrap', 'wrap-reverse', 'nowrap']\n      }],\n      /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */\n      flex: [{\n        flex: ['1', 'auto', 'initial', 'none', isArbitraryValue]\n      }],\n      /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */\n      grow: [{\n        grow: getZeroAndEmpty()\n      }],\n      /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */\n      shrink: [{\n        shrink: getZeroAndEmpty()\n      }],\n      /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */\n      order: [{\n        order: ['first', 'last', 'none', isInteger, isArbitraryValue]\n      }],\n      /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */\n      'grid-cols': [{\n        'grid-cols': [isAny]\n      }],\n      /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-start-end': [{\n        col: ['auto', {\n          span: ['full', isInteger, isArbitraryValue]\n        }, isArbitraryValue]\n      }],\n      /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-start': [{\n        'col-start': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-end': [{\n        'col-end': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */\n      'grid-rows': [{\n        'grid-rows': [isAny]\n      }],\n      /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-start-end': [{\n        row: ['auto', {\n          span: [isInteger, isArbitraryValue]\n        }, isArbitraryValue]\n      }],\n      /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-start': [{\n        'row-start': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-end': [{\n        'row-end': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */\n      'grid-flow': [{\n        'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']\n      }],\n      /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */\n      'auto-cols': [{\n        'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue]\n      }],\n      /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */\n      'auto-rows': [{\n        'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue]\n      }],\n      /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */\n      gap: [{\n        gap: [gap]\n      }],\n      /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */\n      'gap-x': [{\n        'gap-x': [gap]\n      }],\n      /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */\n      'gap-y': [{\n        'gap-y': [gap]\n      }],\n      /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */\n      'justify-content': [{\n        justify: ['normal', ...getAlign()]\n      }],\n      /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */\n      'justify-items': [{\n        'justify-items': ['start', 'end', 'center', 'stretch']\n      }],\n      /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */\n      'justify-self': [{\n        'justify-self': ['auto', 'start', 'end', 'center', 'stretch']\n      }],\n      /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */\n      'align-content': [{\n        content: ['normal', ...getAlign(), 'baseline']\n      }],\n      /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */\n      'align-items': [{\n        items: ['start', 'end', 'center', 'baseline', 'stretch']\n      }],\n      /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */\n      'align-self': [{\n        self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline']\n      }],\n      /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */\n      'place-content': [{\n        'place-content': [...getAlign(), 'baseline']\n      }],\n      /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */\n      'place-items': [{\n        'place-items': ['start', 'end', 'center', 'baseline', 'stretch']\n      }],\n      /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */\n      'place-self': [{\n        'place-self': ['auto', 'start', 'end', 'center', 'stretch']\n      }],\n      // Spacing\n      /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */\n      p: [{\n        p: [padding]\n      }],\n      /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */\n      px: [{\n        px: [padding]\n      }],\n      /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */\n      py: [{\n        py: [padding]\n      }],\n      /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */\n      ps: [{\n        ps: [padding]\n      }],\n      /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pe: [{\n        pe: [padding]\n      }],\n      /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pt: [{\n        pt: [padding]\n      }],\n      /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pr: [{\n        pr: [padding]\n      }],\n      /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pb: [{\n        pb: [padding]\n      }],\n      /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pl: [{\n        pl: [padding]\n      }],\n      /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */\n      m: [{\n        m: [margin]\n      }],\n      /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mx: [{\n        mx: [margin]\n      }],\n      /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */\n      my: [{\n        my: [margin]\n      }],\n      /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ms: [{\n        ms: [margin]\n      }],\n      /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */\n      me: [{\n        me: [margin]\n      }],\n      /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mt: [{\n        mt: [margin]\n      }],\n      /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mr: [{\n        mr: [margin]\n      }],\n      /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mb: [{\n        mb: [margin]\n      }],\n      /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ml: [{\n        ml: [margin]\n      }],\n      /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-x': [{\n        'space-x': [space]\n      }],\n      /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-x-reverse': ['space-x-reverse'],\n      /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-y': [{\n        'space-y': [space]\n      }],\n      /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-y-reverse': ['space-y-reverse'],\n      // Sizing\n      /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */\n      w: [{\n        w: ['auto', 'min', 'max', 'fit', 'svw', 'lvw', 'dvw', isArbitraryValue, spacing]\n      }],\n      /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */\n      'min-w': [{\n        'min-w': [isArbitraryValue, spacing, 'min', 'max', 'fit']\n      }],\n      /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */\n      'max-w': [{\n        'max-w': [isArbitraryValue, spacing, 'none', 'full', 'min', 'max', 'fit', 'prose', {\n          screen: [isTshirtSize]\n        }, isTshirtSize]\n      }],\n      /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */\n      h: [{\n        h: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']\n      }],\n      /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */\n      'min-h': [{\n        'min-h': [isArbitraryValue, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']\n      }],\n      /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */\n      'max-h': [{\n        'max-h': [isArbitraryValue, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']\n      }],\n      /**\n       * Size\n       * @see https://tailwindcss.com/docs/size\n       */\n      size: [{\n        size: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit']\n      }],\n      // Typography\n      /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */\n      'font-size': [{\n        text: ['base', isTshirtSize, isArbitraryLength]\n      }],\n      /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */\n      'font-smoothing': ['antialiased', 'subpixel-antialiased'],\n      /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */\n      'font-style': ['italic', 'not-italic'],\n      /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */\n      'font-weight': [{\n        font: ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black', isArbitraryNumber]\n      }],\n      /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */\n      'font-family': [{\n        font: [isAny]\n      }],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-normal': ['normal-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-ordinal': ['ordinal'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-slashed-zero': ['slashed-zero'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-figure': ['lining-nums', 'oldstyle-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-spacing': ['proportional-nums', 'tabular-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-fraction': ['diagonal-fractions', 'stacked-fractons'],\n      /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */\n      tracking: [{\n        tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', isArbitraryValue]\n      }],\n      /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */\n      'line-clamp': [{\n        'line-clamp': ['none', isNumber, isArbitraryNumber]\n      }],\n      /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */\n      leading: [{\n        leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isLength, isArbitraryValue]\n      }],\n      /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */\n      'list-image': [{\n        'list-image': ['none', isArbitraryValue]\n      }],\n      /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */\n      'list-style-type': [{\n        list: ['none', 'disc', 'decimal', isArbitraryValue]\n      }],\n      /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */\n      'list-style-position': [{\n        list: ['inside', 'outside']\n      }],\n      /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/placeholder-color\n       */\n      'placeholder-color': [{\n        placeholder: [colors]\n      }],\n      /**\n       * Placeholder Opacity\n       * @see https://tailwindcss.com/docs/placeholder-opacity\n       */\n      'placeholder-opacity': [{\n        'placeholder-opacity': [opacity]\n      }],\n      /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */\n      'text-alignment': [{\n        text: ['left', 'center', 'right', 'justify', 'start', 'end']\n      }],\n      /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */\n      'text-color': [{\n        text: [colors]\n      }],\n      /**\n       * Text Opacity\n       * @see https://tailwindcss.com/docs/text-opacity\n       */\n      'text-opacity': [{\n        'text-opacity': [opacity]\n      }],\n      /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */\n      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],\n      /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */\n      'text-decoration-style': [{\n        decoration: [...getLineStyles(), 'wavy']\n      }],\n      /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */\n      'text-decoration-thickness': [{\n        decoration: ['auto', 'from-font', isLength, isArbitraryLength]\n      }],\n      /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */\n      'underline-offset': [{\n        'underline-offset': ['auto', isLength, isArbitraryValue]\n      }],\n      /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */\n      'text-decoration-color': [{\n        decoration: [colors]\n      }],\n      /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */\n      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],\n      /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */\n      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],\n      /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */\n      'text-wrap': [{\n        text: ['wrap', 'nowrap', 'balance', 'pretty']\n      }],\n      /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */\n      indent: [{\n        indent: getSpacingWithArbitrary()\n      }],\n      /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */\n      'vertical-align': [{\n        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryValue]\n      }],\n      /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */\n      whitespace: [{\n        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']\n      }],\n      /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */\n      break: [{\n        break: ['normal', 'words', 'all', 'keep']\n      }],\n      /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */\n      hyphens: [{\n        hyphens: ['none', 'manual', 'auto']\n      }],\n      /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */\n      content: [{\n        content: ['none', isArbitraryValue]\n      }],\n      // Backgrounds\n      /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */\n      'bg-attachment': [{\n        bg: ['fixed', 'local', 'scroll']\n      }],\n      /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */\n      'bg-clip': [{\n        'bg-clip': ['border', 'padding', 'content', 'text']\n      }],\n      /**\n       * Background Opacity\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/background-opacity\n       */\n      'bg-opacity': [{\n        'bg-opacity': [opacity]\n      }],\n      /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */\n      'bg-origin': [{\n        'bg-origin': ['border', 'padding', 'content']\n      }],\n      /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */\n      'bg-position': [{\n        bg: [...getPositions(), isArbitraryPosition]\n      }],\n      /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */\n      'bg-repeat': [{\n        bg: ['no-repeat', {\n          repeat: ['', 'x', 'y', 'round', 'space']\n        }]\n      }],\n      /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */\n      'bg-size': [{\n        bg: ['auto', 'cover', 'contain', isArbitrarySize]\n      }],\n      /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */\n      'bg-image': [{\n        bg: ['none', {\n          'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']\n        }, isArbitraryImage]\n      }],\n      /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */\n      'bg-color': [{\n        bg: [colors]\n      }],\n      /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-from-pos': [{\n        from: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-via-pos': [{\n        via: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-to-pos': [{\n        to: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-from': [{\n        from: [gradientColorStops]\n      }],\n      /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-via': [{\n        via: [gradientColorStops]\n      }],\n      /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-to': [{\n        to: [gradientColorStops]\n      }],\n      // Borders\n      /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      rounded: [{\n        rounded: [borderRadius]\n      }],\n      /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-s': [{\n        'rounded-s': [borderRadius]\n      }],\n      /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-e': [{\n        'rounded-e': [borderRadius]\n      }],\n      /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-t': [{\n        'rounded-t': [borderRadius]\n      }],\n      /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-r': [{\n        'rounded-r': [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-b': [{\n        'rounded-b': [borderRadius]\n      }],\n      /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-l': [{\n        'rounded-l': [borderRadius]\n      }],\n      /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-ss': [{\n        'rounded-ss': [borderRadius]\n      }],\n      /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-se': [{\n        'rounded-se': [borderRadius]\n      }],\n      /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-ee': [{\n        'rounded-ee': [borderRadius]\n      }],\n      /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-es': [{\n        'rounded-es': [borderRadius]\n      }],\n      /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-tl': [{\n        'rounded-tl': [borderRadius]\n      }],\n      /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-tr': [{\n        'rounded-tr': [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-br': [{\n        'rounded-br': [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-bl': [{\n        'rounded-bl': [borderRadius]\n      }],\n      /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w': [{\n        border: [borderWidth]\n      }],\n      /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-x': [{\n        'border-x': [borderWidth]\n      }],\n      /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-y': [{\n        'border-y': [borderWidth]\n      }],\n      /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-s': [{\n        'border-s': [borderWidth]\n      }],\n      /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-e': [{\n        'border-e': [borderWidth]\n      }],\n      /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-t': [{\n        'border-t': [borderWidth]\n      }],\n      /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-r': [{\n        'border-r': [borderWidth]\n      }],\n      /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-b': [{\n        'border-b': [borderWidth]\n      }],\n      /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-l': [{\n        'border-l': [borderWidth]\n      }],\n      /**\n       * Border Opacity\n       * @see https://tailwindcss.com/docs/border-opacity\n       */\n      'border-opacity': [{\n        'border-opacity': [opacity]\n      }],\n      /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */\n      'border-style': [{\n        border: [...getLineStyles(), 'hidden']\n      }],\n      /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-x': [{\n        'divide-x': [borderWidth]\n      }],\n      /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-x-reverse': ['divide-x-reverse'],\n      /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-y': [{\n        'divide-y': [borderWidth]\n      }],\n      /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-y-reverse': ['divide-y-reverse'],\n      /**\n       * Divide Opacity\n       * @see https://tailwindcss.com/docs/divide-opacity\n       */\n      'divide-opacity': [{\n        'divide-opacity': [opacity]\n      }],\n      /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/divide-style\n       */\n      'divide-style': [{\n        divide: getLineStyles()\n      }],\n      /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color': [{\n        border: [borderColor]\n      }],\n      /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-x': [{\n        'border-x': [borderColor]\n      }],\n      /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-y': [{\n        'border-y': [borderColor]\n      }],\n      /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-t': [{\n        'border-t': [borderColor]\n      }],\n      /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-r': [{\n        'border-r': [borderColor]\n      }],\n      /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-b': [{\n        'border-b': [borderColor]\n      }],\n      /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-l': [{\n        'border-l': [borderColor]\n      }],\n      /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */\n      'divide-color': [{\n        divide: [borderColor]\n      }],\n      /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */\n      'outline-style': [{\n        outline: ['', ...getLineStyles()]\n      }],\n      /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */\n      'outline-offset': [{\n        'outline-offset': [isLength, isArbitraryValue]\n      }],\n      /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */\n      'outline-w': [{\n        outline: [isLength, isArbitraryLength]\n      }],\n      /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */\n      'outline-color': [{\n        outline: [colors]\n      }],\n      /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/ring-width\n       */\n      'ring-w': [{\n        ring: getLengthWithEmptyAndArbitrary()\n      }],\n      /**\n       * Ring Width Inset\n       * @see https://tailwindcss.com/docs/ring-width\n       */\n      'ring-w-inset': ['ring-inset'],\n      /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/ring-color\n       */\n      'ring-color': [{\n        ring: [colors]\n      }],\n      /**\n       * Ring Opacity\n       * @see https://tailwindcss.com/docs/ring-opacity\n       */\n      'ring-opacity': [{\n        'ring-opacity': [opacity]\n      }],\n      /**\n       * Ring Offset Width\n       * @see https://tailwindcss.com/docs/ring-offset-width\n       */\n      'ring-offset-w': [{\n        'ring-offset': [isLength, isArbitraryLength]\n      }],\n      /**\n       * Ring Offset Color\n       * @see https://tailwindcss.com/docs/ring-offset-color\n       */\n      'ring-offset-color': [{\n        'ring-offset': [colors]\n      }],\n      // Effects\n      /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */\n      shadow: [{\n        shadow: ['', 'inner', 'none', isTshirtSize, isArbitraryShadow]\n      }],\n      /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow-color\n       */\n      'shadow-color': [{\n        shadow: [isAny]\n      }],\n      /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */\n      opacity: [{\n        opacity: [opacity]\n      }],\n      /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */\n      'mix-blend': [{\n        'mix-blend': [...getBlendModes(), 'plus-lighter', 'plus-darker']\n      }],\n      /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */\n      'bg-blend': [{\n        'bg-blend': getBlendModes()\n      }],\n      // Filters\n      /**\n       * Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/filter\n       */\n      filter: [{\n        filter: ['', 'none']\n      }],\n      /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */\n      blur: [{\n        blur: [blur]\n      }],\n      /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */\n      brightness: [{\n        brightness: [brightness]\n      }],\n      /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */\n      contrast: [{\n        contrast: [contrast]\n      }],\n      /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */\n      'drop-shadow': [{\n        'drop-shadow': ['', 'none', isTshirtSize, isArbitraryValue]\n      }],\n      /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */\n      grayscale: [{\n        grayscale: [grayscale]\n      }],\n      /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */\n      'hue-rotate': [{\n        'hue-rotate': [hueRotate]\n      }],\n      /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */\n      invert: [{\n        invert: [invert]\n      }],\n      /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */\n      saturate: [{\n        saturate: [saturate]\n      }],\n      /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */\n      sepia: [{\n        sepia: [sepia]\n      }],\n      /**\n       * Backdrop Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */\n      'backdrop-filter': [{\n        'backdrop-filter': ['', 'none']\n      }],\n      /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */\n      'backdrop-blur': [{\n        'backdrop-blur': [blur]\n      }],\n      /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */\n      'backdrop-brightness': [{\n        'backdrop-brightness': [brightness]\n      }],\n      /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */\n      'backdrop-contrast': [{\n        'backdrop-contrast': [contrast]\n      }],\n      /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */\n      'backdrop-grayscale': [{\n        'backdrop-grayscale': [grayscale]\n      }],\n      /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */\n      'backdrop-hue-rotate': [{\n        'backdrop-hue-rotate': [hueRotate]\n      }],\n      /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */\n      'backdrop-invert': [{\n        'backdrop-invert': [invert]\n      }],\n      /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */\n      'backdrop-opacity': [{\n        'backdrop-opacity': [opacity]\n      }],\n      /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */\n      'backdrop-saturate': [{\n        'backdrop-saturate': [saturate]\n      }],\n      /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */\n      'backdrop-sepia': [{\n        'backdrop-sepia': [sepia]\n      }],\n      // Tables\n      /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */\n      'border-collapse': [{\n        border: ['collapse', 'separate']\n      }],\n      /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing': [{\n        'border-spacing': [borderSpacing]\n      }],\n      /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing-x': [{\n        'border-spacing-x': [borderSpacing]\n      }],\n      /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing-y': [{\n        'border-spacing-y': [borderSpacing]\n      }],\n      /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */\n      'table-layout': [{\n        table: ['auto', 'fixed']\n      }],\n      /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */\n      caption: [{\n        caption: ['top', 'bottom']\n      }],\n      // Transitions and Animation\n      /**\n       * Tranisition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */\n      transition: [{\n        transition: ['none', 'all', '', 'colors', 'opacity', 'shadow', 'transform', isArbitraryValue]\n      }],\n      /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */\n      duration: [{\n        duration: getNumberAndArbitrary()\n      }],\n      /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */\n      ease: [{\n        ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue]\n      }],\n      /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */\n      delay: [{\n        delay: getNumberAndArbitrary()\n      }],\n      /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */\n      animate: [{\n        animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue]\n      }],\n      // Transforms\n      /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */\n      transform: [{\n        transform: ['', 'gpu', 'none']\n      }],\n      /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */\n      scale: [{\n        scale: [scale]\n      }],\n      /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-x': [{\n        'scale-x': [scale]\n      }],\n      /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-y': [{\n        'scale-y': [scale]\n      }],\n      /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      rotate: [{\n        rotate: [isInteger, isArbitraryValue]\n      }],\n      /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-x': [{\n        'translate-x': [translate]\n      }],\n      /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-y': [{\n        'translate-y': [translate]\n      }],\n      /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */\n      'skew-x': [{\n        'skew-x': [skew]\n      }],\n      /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */\n      'skew-y': [{\n        'skew-y': [skew]\n      }],\n      /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */\n      'transform-origin': [{\n        origin: ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryValue]\n      }],\n      // Interactivity\n      /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */\n      accent: [{\n        accent: ['auto', colors]\n      }],\n      /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */\n      appearance: [{\n        appearance: ['none', 'auto']\n      }],\n      /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */\n      cursor: [{\n        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryValue]\n      }],\n      /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */\n      'caret-color': [{\n        caret: [colors]\n      }],\n      /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */\n      'pointer-events': [{\n        'pointer-events': ['none', 'auto']\n      }],\n      /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */\n      resize: [{\n        resize: ['none', 'y', 'x', '']\n      }],\n      /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */\n      'scroll-behavior': [{\n        scroll: ['auto', 'smooth']\n      }],\n      /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-m': [{\n        'scroll-m': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mx': [{\n        'scroll-mx': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-my': [{\n        'scroll-my': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-ms': [{\n        'scroll-ms': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-me': [{\n        'scroll-me': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mt': [{\n        'scroll-mt': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mr': [{\n        'scroll-mr': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mb': [{\n        'scroll-mb': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-ml': [{\n        'scroll-ml': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-p': [{\n        'scroll-p': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-px': [{\n        'scroll-px': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-py': [{\n        'scroll-py': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-ps': [{\n        'scroll-ps': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pe': [{\n        'scroll-pe': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pt': [{\n        'scroll-pt': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pr': [{\n        'scroll-pr': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pb': [{\n        'scroll-pb': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pl': [{\n        'scroll-pl': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */\n      'snap-align': [{\n        snap: ['start', 'end', 'center', 'align-none']\n      }],\n      /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */\n      'snap-stop': [{\n        snap: ['normal', 'always']\n      }],\n      /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      'snap-type': [{\n        snap: ['none', 'x', 'y', 'both']\n      }],\n      /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      'snap-strictness': [{\n        snap: ['mandatory', 'proximity']\n      }],\n      /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      touch: [{\n        touch: ['auto', 'none', 'manipulation']\n      }],\n      /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-x': [{\n        'touch-pan': ['x', 'left', 'right']\n      }],\n      /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-y': [{\n        'touch-pan': ['y', 'up', 'down']\n      }],\n      /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-pz': ['touch-pinch-zoom'],\n      /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */\n      select: [{\n        select: ['none', 'text', 'all', 'auto']\n      }],\n      /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */\n      'will-change': [{\n        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue]\n      }],\n      // SVG\n      /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */\n      fill: [{\n        fill: [colors, 'none']\n      }],\n      /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */\n      'stroke-w': [{\n        stroke: [isLength, isArbitraryLength, isArbitraryNumber]\n      }],\n      /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */\n      stroke: [{\n        stroke: [colors, 'none']\n      }],\n      // Accessibility\n      /**\n       * Screen Readers\n       * @see https://tailwindcss.com/docs/screen-readers\n       */\n      sr: ['sr-only', 'not-sr-only'],\n      /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */\n      'forced-color-adjust': [{\n        'forced-color-adjust': ['auto', 'none']\n      }]\n    },\n    conflictingClassGroups: {\n      overflow: ['overflow-x', 'overflow-y'],\n      overscroll: ['overscroll-x', 'overscroll-y'],\n      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],\n      'inset-x': ['right', 'left'],\n      'inset-y': ['top', 'bottom'],\n      flex: ['basis', 'grow', 'shrink'],\n      gap: ['gap-x', 'gap-y'],\n      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],\n      px: ['pr', 'pl'],\n      py: ['pt', 'pb'],\n      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],\n      mx: ['mr', 'ml'],\n      my: ['mt', 'mb'],\n      size: ['w', 'h'],\n      'font-size': ['leading'],\n      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],\n      'fvn-ordinal': ['fvn-normal'],\n      'fvn-slashed-zero': ['fvn-normal'],\n      'fvn-figure': ['fvn-normal'],\n      'fvn-spacing': ['fvn-normal'],\n      'fvn-fraction': ['fvn-normal'],\n      'line-clamp': ['display', 'overflow'],\n      rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],\n      'rounded-s': ['rounded-ss', 'rounded-es'],\n      'rounded-e': ['rounded-se', 'rounded-ee'],\n      'rounded-t': ['rounded-tl', 'rounded-tr'],\n      'rounded-r': ['rounded-tr', 'rounded-br'],\n      'rounded-b': ['rounded-br', 'rounded-bl'],\n      'rounded-l': ['rounded-tl', 'rounded-bl'],\n      'border-spacing': ['border-spacing-x', 'border-spacing-y'],\n      'border-w': ['border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],\n      'border-w-x': ['border-w-r', 'border-w-l'],\n      'border-w-y': ['border-w-t', 'border-w-b'],\n      'border-color': ['border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],\n      'border-color-x': ['border-color-r', 'border-color-l'],\n      'border-color-y': ['border-color-t', 'border-color-b'],\n      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],\n      'scroll-mx': ['scroll-mr', 'scroll-ml'],\n      'scroll-my': ['scroll-mt', 'scroll-mb'],\n      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],\n      'scroll-px': ['scroll-pr', 'scroll-pl'],\n      'scroll-py': ['scroll-pt', 'scroll-pb'],\n      touch: ['touch-x', 'touch-y', 'touch-pz'],\n      'touch-x': ['touch'],\n      'touch-y': ['touch'],\n      'touch-pz': ['touch']\n    },\n    conflictingClassGroupModifiers: {\n      'font-size': ['leading']\n    }\n  };\n}\n\n/**\n * @param baseConfig Config where other config will be merged into. This object will be mutated.\n * @param configExtension Partial config to merge into the `baseConfig`.\n */\nfunction mergeConfigs(baseConfig, {\n  cacheSize,\n  prefix,\n  separator,\n  experimentalParseClassName,\n  extend = {},\n  override = {}\n}) {\n  overrideProperty(baseConfig, 'cacheSize', cacheSize);\n  overrideProperty(baseConfig, 'prefix', prefix);\n  overrideProperty(baseConfig, 'separator', separator);\n  overrideProperty(baseConfig, 'experimentalParseClassName', experimentalParseClassName);\n  for (const configKey in override) {\n    overrideConfigProperties(baseConfig[configKey], override[configKey]);\n  }\n  for (const key in extend) {\n    mergeConfigProperties(baseConfig[key], extend[key]);\n  }\n  return baseConfig;\n}\nfunction overrideProperty(baseObject, overrideKey, overrideValue) {\n  if (overrideValue !== undefined) {\n    baseObject[overrideKey] = overrideValue;\n  }\n}\nfunction overrideConfigProperties(baseObject, overrideObject) {\n  if (overrideObject) {\n    for (const key in overrideObject) {\n      overrideProperty(baseObject, key, overrideObject[key]);\n    }\n  }\n}\nfunction mergeConfigProperties(baseObject, mergeObject) {\n  if (mergeObject) {\n    for (const key in mergeObject) {\n      const mergeValue = mergeObject[key];\n      if (mergeValue !== undefined) {\n        baseObject[key] = (baseObject[key] || []).concat(mergeValue);\n      }\n    }\n  }\n}\nfunction extendTailwindMerge(configExtension, ...createConfig) {\n  return typeof configExtension === 'function' ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);\n}\nconst twMerge = /*#__PURE__*/createTailwindMerge(getDefaultConfig);\n\n//# sourceMappingURL=bundle-mjs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fdevonfennell%2FDesktop%2Fnext-investment%2Ffrontend%2Fapp%2F(root)%2Fhome%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);